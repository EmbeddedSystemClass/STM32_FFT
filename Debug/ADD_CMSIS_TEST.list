
ADD_CMSIS_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002394  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e38  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00002080  20000000  08005364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00022080  2**0
                  CONTENTS
  8 .bss          00001028  20002080  20002080  00022080  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200030a8  200030a8  00022080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00022080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000ac43  00000000  00000000  000220b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ac8  00000000  00000000  0002ccf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000030ad  00000000  00000000  0002e7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000400  00000000  00000000  00031868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003d0  00000000  00000000  00031c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002d5a  00000000  00000000  00032038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002397  00000000  00000000  00034d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00037129  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000a38  00000000  00000000  000371a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20002080 	.word	0x20002080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002504 	.word	0x08002504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20002084 	.word	0x20002084
 80001c4:	08002504 	.word	0x08002504

080001c8 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001c8:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001ca:	2b01      	cmp	r3, #1
	IT       LS
 80001cc:	bf98      	it	ls
	BXLS     lr
 80001ce:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001d4:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e0:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001e6:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001e8:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001ea:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001ec:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001f6:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000200:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000204:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000208:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8000212:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8000224:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8000226:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000228:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
	POP      {r4-r9}
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8000232:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000234:	2b01      	cmp	r3, #1
	IT       LS
 8000236:	bf98      	it	ls
	BXLS     lr
 8000238:	4770      	bxls	lr
	PUSH     {r4-r9}
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800023e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800024a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000268:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 800026e:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000272:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8000276:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800027a:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 800027c:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 800027e:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c6:	f1a4 0401 	sub.w	r4, r4, #1
 80003ca:	d1e9      	bne.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f092 0f00 	teq	r2, #0
 8000572:	bf14      	ite	ne
 8000574:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e720      	b.n	80003cc <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aedc 	beq.w	800037a <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6c1      	b.n	800037a <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b97a 	b.w	8000dc8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	468c      	mov	ip, r1
 8000af2:	460d      	mov	r5, r1
 8000af4:	4604      	mov	r4, r0
 8000af6:	9e08      	ldr	r6, [sp, #32]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d151      	bne.n	8000ba0 <__udivmoddi4+0xb4>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d96d      	bls.n	8000bde <__udivmoddi4+0xf2>
 8000b02:	fab2 fe82 	clz	lr, r2
 8000b06:	f1be 0f00 	cmp.w	lr, #0
 8000b0a:	d00b      	beq.n	8000b24 <__udivmoddi4+0x38>
 8000b0c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b10:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b18:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b1c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b20:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b24:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b28:	0c25      	lsrs	r5, r4, #16
 8000b2a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b2e:	fa1f f987 	uxth.w	r9, r7
 8000b32:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b36:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b3a:	fb08 f309 	mul.w	r3, r8, r9
 8000b3e:	42ab      	cmp	r3, r5
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x6c>
 8000b42:	19ed      	adds	r5, r5, r7
 8000b44:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b48:	f080 8123 	bcs.w	8000d92 <__udivmoddi4+0x2a6>
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	f240 8120 	bls.w	8000d92 <__udivmoddi4+0x2a6>
 8000b52:	f1a8 0802 	sub.w	r8, r8, #2
 8000b56:	443d      	add	r5, r7
 8000b58:	1aed      	subs	r5, r5, r3
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b60:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b68:	fb00 f909 	mul.w	r9, r0, r9
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	d909      	bls.n	8000b84 <__udivmoddi4+0x98>
 8000b70:	19e4      	adds	r4, r4, r7
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	f080 810a 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000b7a:	45a1      	cmp	r9, r4
 8000b7c:	f240 8107 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000b80:	3802      	subs	r0, #2
 8000b82:	443c      	add	r4, r7
 8000b84:	eba4 0409 	sub.w	r4, r4, r9
 8000b88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d061      	beq.n	8000c56 <__udivmoddi4+0x16a>
 8000b92:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b96:	2300      	movs	r3, #0
 8000b98:	6034      	str	r4, [r6, #0]
 8000b9a:	6073      	str	r3, [r6, #4]
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d907      	bls.n	8000bb4 <__udivmoddi4+0xc8>
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d054      	beq.n	8000c52 <__udivmoddi4+0x166>
 8000ba8:	2100      	movs	r1, #0
 8000baa:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb4:	fab3 f183 	clz	r1, r3
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	f040 808e 	bne.w	8000cda <__udivmoddi4+0x1ee>
 8000bbe:	42ab      	cmp	r3, r5
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xdc>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80fa 	bhi.w	8000dbc <__udivmoddi4+0x2d0>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb65 0503 	sbc.w	r5, r5, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	46ac      	mov	ip, r5
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d03f      	beq.n	8000c56 <__udivmoddi4+0x16a>
 8000bd6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	b912      	cbnz	r2, 8000be6 <__udivmoddi4+0xfa>
 8000be0:	2701      	movs	r7, #1
 8000be2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000be6:	fab7 fe87 	clz	lr, r7
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d134      	bne.n	8000c5a <__udivmoddi4+0x16e>
 8000bf0:	1beb      	subs	r3, r5, r7
 8000bf2:	0c3a      	lsrs	r2, r7, #16
 8000bf4:	fa1f fc87 	uxth.w	ip, r7
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bfe:	0c25      	lsrs	r5, r4, #16
 8000c00:	fb02 3318 	mls	r3, r2, r8, r3
 8000c04:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c08:	fb0c f308 	mul.w	r3, ip, r8
 8000c0c:	42ab      	cmp	r3, r5
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x134>
 8000c10:	19ed      	adds	r5, r5, r7
 8000c12:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x132>
 8000c18:	42ab      	cmp	r3, r5
 8000c1a:	f200 80d1 	bhi.w	8000dc0 <__udivmoddi4+0x2d4>
 8000c1e:	4680      	mov	r8, r0
 8000c20:	1aed      	subs	r5, r5, r3
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c28:	fb02 5510 	mls	r5, r2, r0, r5
 8000c2c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c30:	fb0c fc00 	mul.w	ip, ip, r0
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x15c>
 8000c38:	19e4      	adds	r4, r4, r7
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x15a>
 8000c40:	45a4      	cmp	ip, r4
 8000c42:	f200 80b8 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 040c 	sub.w	r4, r4, ip
 8000c4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c50:	e79d      	b.n	8000b8e <__udivmoddi4+0xa2>
 8000c52:	4631      	mov	r1, r6
 8000c54:	4630      	mov	r0, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	f1ce 0420 	rsb	r4, lr, #32
 8000c5e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c62:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c66:	fa20 f804 	lsr.w	r8, r0, r4
 8000c6a:	0c3a      	lsrs	r2, r7, #16
 8000c6c:	fa25 f404 	lsr.w	r4, r5, r4
 8000c70:	ea48 0803 	orr.w	r8, r8, r3
 8000c74:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c78:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c7c:	fb02 4411 	mls	r4, r2, r1, r4
 8000c80:	fa1f fc87 	uxth.w	ip, r7
 8000c84:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c88:	fb01 f30c 	mul.w	r3, r1, ip
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x1bc>
 8000c94:	19ed      	adds	r5, r5, r7
 8000c96:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9a:	f080 808a 	bcs.w	8000db2 <__udivmoddi4+0x2c6>
 8000c9e:	42ab      	cmp	r3, r5
 8000ca0:	f240 8087 	bls.w	8000db2 <__udivmoddi4+0x2c6>
 8000ca4:	3902      	subs	r1, #2
 8000ca6:	443d      	add	r5, r7
 8000ca8:	1aeb      	subs	r3, r5, r3
 8000caa:	fa1f f588 	uxth.w	r5, r8
 8000cae:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cb2:	fb02 3310 	mls	r3, r2, r0, r3
 8000cb6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cba:	fb00 f30c 	mul.w	r3, r0, ip
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x1e6>
 8000cc2:	19ed      	adds	r5, r5, r7
 8000cc4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc8:	d26f      	bcs.n	8000daa <__udivmoddi4+0x2be>
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	d96d      	bls.n	8000daa <__udivmoddi4+0x2be>
 8000cce:	3802      	subs	r0, #2
 8000cd0:	443d      	add	r5, r7
 8000cd2:	1aeb      	subs	r3, r5, r3
 8000cd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd8:	e78f      	b.n	8000bfa <__udivmoddi4+0x10e>
 8000cda:	f1c1 0720 	rsb	r7, r1, #32
 8000cde:	fa22 f807 	lsr.w	r8, r2, r7
 8000ce2:	408b      	lsls	r3, r1
 8000ce4:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce8:	ea48 0303 	orr.w	r3, r8, r3
 8000cec:	fa20 fe07 	lsr.w	lr, r0, r7
 8000cf0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cf4:	40fd      	lsrs	r5, r7
 8000cf6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cfa:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cfe:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d02:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d06:	fa1f f883 	uxth.w	r8, r3
 8000d0a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d0e:	fb09 f408 	mul.w	r4, r9, r8
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	fa02 f201 	lsl.w	r2, r2, r1
 8000d18:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x244>
 8000d1e:	18ed      	adds	r5, r5, r3
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d243      	bcs.n	8000dae <__udivmoddi4+0x2c2>
 8000d26:	42ac      	cmp	r4, r5
 8000d28:	d941      	bls.n	8000dae <__udivmoddi4+0x2c2>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	441d      	add	r5, r3
 8000d30:	1b2d      	subs	r5, r5, r4
 8000d32:	fa1f fe8e 	uxth.w	lr, lr
 8000d36:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d3a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d3e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45a0      	cmp	r8, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x26e>
 8000d4a:	18e4      	adds	r4, r4, r3
 8000d4c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d50:	d229      	bcs.n	8000da6 <__udivmoddi4+0x2ba>
 8000d52:	45a0      	cmp	r8, r4
 8000d54:	d927      	bls.n	8000da6 <__udivmoddi4+0x2ba>
 8000d56:	3802      	subs	r0, #2
 8000d58:	441c      	add	r4, r3
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba4 0408 	sub.w	r4, r4, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454c      	cmp	r4, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	464d      	mov	r5, r9
 8000d6c:	d315      	bcc.n	8000d9a <__udivmoddi4+0x2ae>
 8000d6e:	d012      	beq.n	8000d96 <__udivmoddi4+0x2aa>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x29c>
 8000d72:	ebba 030e 	subs.w	r3, sl, lr
 8000d76:	eb64 0405 	sbc.w	r4, r4, r5
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431f      	orrs	r7, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	6037      	str	r7, [r6, #0]
 8000d86:	6074      	str	r4, [r6, #4]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	e6f8      	b.n	8000b84 <__udivmoddi4+0x98>
 8000d92:	4690      	mov	r8, r2
 8000d94:	e6e0      	b.n	8000b58 <__udivmoddi4+0x6c>
 8000d96:	45c2      	cmp	sl, r8
 8000d98:	d2ea      	bcs.n	8000d70 <__udivmoddi4+0x284>
 8000d9a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d9e:	eb69 0503 	sbc.w	r5, r9, r3
 8000da2:	3801      	subs	r0, #1
 8000da4:	e7e4      	b.n	8000d70 <__udivmoddi4+0x284>
 8000da6:	4628      	mov	r0, r5
 8000da8:	e7d7      	b.n	8000d5a <__udivmoddi4+0x26e>
 8000daa:	4640      	mov	r0, r8
 8000dac:	e791      	b.n	8000cd2 <__udivmoddi4+0x1e6>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e7be      	b.n	8000d30 <__udivmoddi4+0x244>
 8000db2:	4601      	mov	r1, r0
 8000db4:	e778      	b.n	8000ca8 <__udivmoddi4+0x1bc>
 8000db6:	3802      	subs	r0, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	e745      	b.n	8000c48 <__udivmoddi4+0x15c>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e708      	b.n	8000bd2 <__udivmoddi4+0xe6>
 8000dc0:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	e72b      	b.n	8000c20 <__udivmoddi4+0x134>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0x3c>)
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_InitTick+0x40>)
{
 8000dd2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	7818      	ldrb	r0, [r3, #0]
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dde:	6810      	ldr	r0, [r2, #0]
 8000de0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000de4:	f000 f888 	bl	8000ef8 <HAL_SYSTICK_Config>
 8000de8:	4604      	mov	r4, r0
 8000dea:	b958      	cbnz	r0, 8000e04 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dec:	2d0f      	cmp	r5, #15
 8000dee:	d809      	bhi.n	8000e04 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	4602      	mov	r2, r0
 8000df2:	4629      	mov	r1, r5
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 f84a 	bl	8000e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_InitTick+0x44>)
 8000dfe:	4620      	mov	r0, r4
 8000e00:	601d      	str	r5, [r3, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e06:	bd38      	pop	{r3, r4, r5, pc}
 8000e08:	20002014 	.word	0x20002014
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_Init>:
{
 8000e14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x30>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f81b 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff ffc8 	bl	8000dcc <HAL_InitTick>
  HAL_MspInit();
 8000e3c:	f001 fa20 	bl	8002280 <HAL_MspInit>
}
 8000e40:	2000      	movs	r0, #0
 8000e42:	bd08      	pop	{r3, pc}
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x10>)
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_IncTick+0x14>)
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	440b      	add	r3, r1
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200030a4 	.word	0x200030a4
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <HAL_GetTick+0x8>)
 8000e62:	6818      	ldr	r0, [r3, #0]
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200030a4 	.word	0x200030a4

08000e6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e6e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e7c:	0200      	lsls	r0, r0, #8
 8000e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000e86:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e88:	60d3      	str	r3, [r2, #12]
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b530      	push	{r4, r5, lr}
 8000e94:	68dc      	ldr	r4, [r3, #12]
 8000e96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	bf28      	it	cs
 8000ea4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 0501 	mov.w	r5, #1
 8000eac:	fa05 f303 	lsl.w	r3, r5, r3
 8000eb0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb4:	bf8c      	ite	hi
 8000eb6:	3c03      	subhi	r4, #3
 8000eb8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eba:	4019      	ands	r1, r3
 8000ebc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebe:	fa05 f404 	lsl.w	r4, r5, r4
 8000ec2:	3c01      	subs	r4, #1
 8000ec4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ec6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	ea42 0201 	orr.w	r2, r2, r1
 8000ecc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	bfaf      	iteee	ge
 8000ed2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	f000 000f 	andlt.w	r0, r0, #15
 8000eda:	4b06      	ldrlt	r3, [pc, #24]	; (8000ef4 <HAL_NVIC_SetPriority+0x64>)
 8000edc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	bfa5      	ittet	ge
 8000ee0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ee4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000eec:	bd30      	pop	{r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	e000ed14 	.word	0xe000ed14

08000ef8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	3801      	subs	r0, #1
 8000efa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000efe:	d20a      	bcs.n	8000f16 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f04:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	21f0      	movs	r1, #240	; 0xf0
 8000f08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f28:	4604      	mov	r4, r0
 8000f2a:	b918      	cbnz	r0, 8000f34 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000f2e:	b002      	add	sp, #8
 8000f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f34:	6803      	ldr	r3, [r0, #0]
 8000f36:	07dd      	lsls	r5, r3, #31
 8000f38:	d410      	bmi.n	8000f5c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	0798      	lsls	r0, r3, #30
 8000f3e:	d458      	bmi.n	8000ff2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	071a      	lsls	r2, r3, #28
 8000f44:	f100 809a 	bmi.w	800107c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	075b      	lsls	r3, r3, #29
 8000f4c:	f100 80b8 	bmi.w	80010c0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f50:	69a2      	ldr	r2, [r4, #24]
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	f040 8119 	bne.w	800118a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e7e8      	b.n	8000f2e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5c:	4ba6      	ldr	r3, [pc, #664]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	f002 020c 	and.w	r2, r2, #12
 8000f64:	2a04      	cmp	r2, #4
 8000f66:	d007      	beq.n	8000f78 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f6e:	2a08      	cmp	r2, #8
 8000f70:	d10a      	bne.n	8000f88 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	0259      	lsls	r1, r3, #9
 8000f76:	d507      	bpl.n	8000f88 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	4b9f      	ldr	r3, [pc, #636]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	039a      	lsls	r2, r3, #14
 8000f7e:	d5dc      	bpl.n	8000f3a <HAL_RCC_OscConfig+0x16>
 8000f80:	6863      	ldr	r3, [r4, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1d9      	bne.n	8000f3a <HAL_RCC_OscConfig+0x16>
 8000f86:	e7d1      	b.n	8000f2c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f88:	6863      	ldr	r3, [r4, #4]
 8000f8a:	4d9b      	ldr	r5, [pc, #620]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 8000f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f90:	d111      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x92>
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f9a:	f7ff ff61 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	4d96      	ldr	r5, [pc, #600]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000fa0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	039b      	lsls	r3, r3, #14
 8000fa6:	d4c8      	bmi.n	8000f3a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff ff5a 	bl	8000e60 <HAL_GetTick>
 8000fac:	1b80      	subs	r0, r0, r6
 8000fae:	2864      	cmp	r0, #100	; 0x64
 8000fb0:	d9f7      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	e7bb      	b.n	8000f2e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fba:	d104      	bne.n	8000fc6 <HAL_RCC_OscConfig+0xa2>
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc2:	602b      	str	r3, [r5, #0]
 8000fc4:	e7e5      	b.n	8000f92 <HAL_RCC_OscConfig+0x6e>
 8000fc6:	682a      	ldr	r2, [r5, #0]
 8000fc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fcc:	602a      	str	r2, [r5, #0]
 8000fce:	682a      	ldr	r2, [r5, #0]
 8000fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fd4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1df      	bne.n	8000f9a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000fda:	f7ff ff41 	bl	8000e60 <HAL_GetTick>
 8000fde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	039f      	lsls	r7, r3, #14
 8000fe4:	d5a9      	bpl.n	8000f3a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff ff3b 	bl	8000e60 <HAL_GetTick>
 8000fea:	1b80      	subs	r0, r0, r6
 8000fec:	2864      	cmp	r0, #100	; 0x64
 8000fee:	d9f7      	bls.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
 8000ff0:	e7df      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff2:	4b81      	ldr	r3, [pc, #516]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	f012 0f0c 	tst.w	r2, #12
 8000ffa:	d007      	beq.n	800100c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001002:	2a08      	cmp	r2, #8
 8001004:	d111      	bne.n	800102a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	025e      	lsls	r6, r3, #9
 800100a:	d40e      	bmi.n	800102a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100c:	4b7a      	ldr	r3, [pc, #488]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	0795      	lsls	r5, r2, #30
 8001012:	d502      	bpl.n	800101a <HAL_RCC_OscConfig+0xf6>
 8001014:	68e2      	ldr	r2, [r4, #12]
 8001016:	2a01      	cmp	r2, #1
 8001018:	d188      	bne.n	8000f2c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	6921      	ldr	r1, [r4, #16]
 800101e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001022:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001026:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001028:	e78a      	b.n	8000f40 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800102a:	68e2      	ldr	r2, [r4, #12]
 800102c:	4b73      	ldr	r3, [pc, #460]	; (80011fc <HAL_RCC_OscConfig+0x2d8>)
 800102e:	b1b2      	cbz	r2, 800105e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001034:	f7ff ff14 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	4d6f      	ldr	r5, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800103a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	0798      	lsls	r0, r3, #30
 8001040:	d507      	bpl.n	8001052 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	682b      	ldr	r3, [r5, #0]
 8001044:	6922      	ldr	r2, [r4, #16]
 8001046:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800104a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800104e:	602b      	str	r3, [r5, #0]
 8001050:	e776      	b.n	8000f40 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff ff05 	bl	8000e60 <HAL_GetTick>
 8001056:	1b80      	subs	r0, r0, r6
 8001058:	2802      	cmp	r0, #2
 800105a:	d9ef      	bls.n	800103c <HAL_RCC_OscConfig+0x118>
 800105c:	e7a9      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800105e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001060:	f7ff fefe 	bl	8000e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001064:	4d64      	ldr	r5, [pc, #400]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001066:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	0799      	lsls	r1, r3, #30
 800106c:	f57f af68 	bpl.w	8000f40 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fef6 	bl	8000e60 <HAL_GetTick>
 8001074:	1b80      	subs	r0, r0, r6
 8001076:	2802      	cmp	r0, #2
 8001078:	d9f6      	bls.n	8001068 <HAL_RCC_OscConfig+0x144>
 800107a:	e79a      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800107c:	6962      	ldr	r2, [r4, #20]
 800107e:	4b60      	ldr	r3, [pc, #384]	; (8001200 <HAL_RCC_OscConfig+0x2dc>)
 8001080:	b17a      	cbz	r2, 80010a2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001086:	f7ff feeb 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108a:	4d5b      	ldr	r5, [pc, #364]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800108c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001090:	079f      	lsls	r7, r3, #30
 8001092:	f53f af59 	bmi.w	8000f48 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001096:	f7ff fee3 	bl	8000e60 <HAL_GetTick>
 800109a:	1b80      	subs	r0, r0, r6
 800109c:	2802      	cmp	r0, #2
 800109e:	d9f6      	bls.n	800108e <HAL_RCC_OscConfig+0x16a>
 80010a0:	e787      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80010a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010a4:	f7ff fedc 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a8:	4d53      	ldr	r5, [pc, #332]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80010aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010ae:	0798      	lsls	r0, r3, #30
 80010b0:	f57f af4a 	bpl.w	8000f48 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fed4 	bl	8000e60 <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d9f6      	bls.n	80010ac <HAL_RCC_OscConfig+0x188>
 80010be:	e778      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c0:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80010c8:	d128      	bne.n	800111c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	9201      	str	r2, [sp, #4]
 80010cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e0:	4d48      	ldr	r5, [pc, #288]	; (8001204 <HAL_RCC_OscConfig+0x2e0>)
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	05d9      	lsls	r1, r3, #23
 80010e6:	d51b      	bpl.n	8001120 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e8:	68a3      	ldr	r3, [r4, #8]
 80010ea:	4d43      	ldr	r5, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d127      	bne.n	8001140 <HAL_RCC_OscConfig+0x21c>
 80010f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80010f8:	f7ff feb2 	bl	8000e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fc:	4d3e      	ldr	r5, [pc, #248]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80010fe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001100:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001104:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001106:	079b      	lsls	r3, r3, #30
 8001108:	d539      	bpl.n	800117e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800110a:	2e00      	cmp	r6, #0
 800110c:	f43f af20 	beq.w	8000f50 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001110:	4a39      	ldr	r2, [pc, #228]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 8001112:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	e719      	b.n	8000f50 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 800111c:	2600      	movs	r6, #0
 800111e:	e7df      	b.n	80010e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001128:	f7ff fe9a 	bl	8000e60 <HAL_GetTick>
 800112c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	682b      	ldr	r3, [r5, #0]
 8001130:	05da      	lsls	r2, r3, #23
 8001132:	d4d9      	bmi.n	80010e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001134:	f7ff fe94 	bl	8000e60 <HAL_GetTick>
 8001138:	1bc0      	subs	r0, r0, r7
 800113a:	2802      	cmp	r0, #2
 800113c:	d9f7      	bls.n	800112e <HAL_RCC_OscConfig+0x20a>
 800113e:	e738      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	2b05      	cmp	r3, #5
 8001142:	d104      	bne.n	800114e <HAL_RCC_OscConfig+0x22a>
 8001144:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	672b      	str	r3, [r5, #112]	; 0x70
 800114c:	e7d0      	b.n	80010f0 <HAL_RCC_OscConfig+0x1cc>
 800114e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	672a      	str	r2, [r5, #112]	; 0x70
 8001156:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001158:	f022 0204 	bic.w	r2, r2, #4
 800115c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1ca      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001162:	f7ff fe7d 	bl	8000e60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800116a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800116e:	0798      	lsls	r0, r3, #30
 8001170:	d5cb      	bpl.n	800110a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff fe75 	bl	8000e60 <HAL_GetTick>
 8001176:	1bc0      	subs	r0, r0, r7
 8001178:	4540      	cmp	r0, r8
 800117a:	d9f7      	bls.n	800116c <HAL_RCC_OscConfig+0x248>
 800117c:	e719      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fe6f 	bl	8000e60 <HAL_GetTick>
 8001182:	1bc0      	subs	r0, r0, r7
 8001184:	4540      	cmp	r0, r8
 8001186:	d9bd      	bls.n	8001104 <HAL_RCC_OscConfig+0x1e0>
 8001188:	e713      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800118a:	4d1b      	ldr	r5, [pc, #108]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
 800118c:	68ab      	ldr	r3, [r5, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	f43f aeca 	beq.w	8000f2c <HAL_RCC_OscConfig+0x8>
 8001198:	4e1b      	ldr	r6, [pc, #108]	; (8001208 <HAL_RCC_OscConfig+0x2e4>)
 800119a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800119c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800119e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a0:	d134      	bne.n	800120c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80011a2:	f7ff fe5d 	bl	8000e60 <HAL_GetTick>
 80011a6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	0199      	lsls	r1, r3, #6
 80011ac:	d41e      	bmi.n	80011ec <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011ae:	6a22      	ldr	r2, [r4, #32]
 80011b0:	69e3      	ldr	r3, [r4, #28]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c2:	4c0d      	ldr	r4, [pc, #52]	; (80011f8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011c4:	0852      	lsrs	r2, r2, #1
 80011c6:	3a01      	subs	r2, #1
 80011c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011cc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011ce:	2301      	movs	r3, #1
 80011d0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80011d2:	f7ff fe45 	bl	8000e60 <HAL_GetTick>
 80011d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	019a      	lsls	r2, r3, #6
 80011dc:	f53f aebc 	bmi.w	8000f58 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fe3e 	bl	8000e60 <HAL_GetTick>
 80011e4:	1b40      	subs	r0, r0, r5
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d9f6      	bls.n	80011d8 <HAL_RCC_OscConfig+0x2b4>
 80011ea:	e6e2      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fe38 	bl	8000e60 <HAL_GetTick>
 80011f0:	1bc0      	subs	r0, r0, r7
 80011f2:	2802      	cmp	r0, #2
 80011f4:	d9d8      	bls.n	80011a8 <HAL_RCC_OscConfig+0x284>
 80011f6:	e6dc      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
 80011f8:	40023800 	.word	0x40023800
 80011fc:	42470000 	.word	0x42470000
 8001200:	42470e80 	.word	0x42470e80
 8001204:	40007000 	.word	0x40007000
 8001208:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 800120c:	f7ff fe28 	bl	8000e60 <HAL_GetTick>
 8001210:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	019b      	lsls	r3, r3, #6
 8001216:	f57f ae9f 	bpl.w	8000f58 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff fe21 	bl	8000e60 <HAL_GetTick>
 800121e:	1b00      	subs	r0, r0, r4
 8001220:	2802      	cmp	r0, #2
 8001222:	d9f6      	bls.n	8001212 <HAL_RCC_OscConfig+0x2ee>
 8001224:	e6c5      	b.n	8000fb2 <HAL_RCC_OscConfig+0x8e>
 8001226:	bf00      	nop

08001228 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001228:	4913      	ldr	r1, [pc, #76]	; (8001278 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800122a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122c:	688b      	ldr	r3, [r1, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d003      	beq.n	800123e <HAL_RCC_GetSysClockFreq+0x16>
 8001236:	2b08      	cmp	r3, #8
 8001238:	d003      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800123a:	4810      	ldr	r0, [pc, #64]	; (800127c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800123c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <HAL_RCC_GetSysClockFreq+0x58>)
 8001240:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001242:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001244:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001246:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001248:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124c:	bf14      	ite	ne
 800124e:	480c      	ldrne	r0, [pc, #48]	; (8001280 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001250:	480a      	ldreq	r0, [pc, #40]	; (800127c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001252:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001256:	bf18      	it	ne
 8001258:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125e:	fba1 0100 	umull	r0, r1, r1, r0
 8001262:	f7ff fc2b 	bl	8000abc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_RCC_GetSysClockFreq+0x50>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800126e:	3301      	adds	r3, #1
 8001270:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001272:	fbb0 f0f3 	udiv	r0, r0, r3
 8001276:	bd08      	pop	{r3, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	00f42400 	.word	0x00f42400
 8001280:	017d7840 	.word	0x017d7840

08001284 <HAL_RCC_ClockConfig>:
{
 8001284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001288:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800128a:	4604      	mov	r4, r0
 800128c:	b910      	cbnz	r0, 8001294 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <HAL_RCC_ClockConfig+0x124>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f002 020f 	and.w	r2, r2, #15
 800129c:	428a      	cmp	r2, r1
 800129e:	d328      	bcc.n	80012f2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a0:	6821      	ldr	r1, [r4, #0]
 80012a2:	078f      	lsls	r7, r1, #30
 80012a4:	d42d      	bmi.n	8001302 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a6:	07c8      	lsls	r0, r1, #31
 80012a8:	d440      	bmi.n	800132c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <HAL_RCC_ClockConfig+0x124>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f002 020f 	and.w	r2, r2, #15
 80012b2:	4295      	cmp	r5, r2
 80012b4:	d366      	bcc.n	8001384 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b6:	6822      	ldr	r2, [r4, #0]
 80012b8:	0751      	lsls	r1, r2, #29
 80012ba:	d46c      	bmi.n	8001396 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	0713      	lsls	r3, r2, #28
 80012be:	d507      	bpl.n	80012d0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012c0:	4a3a      	ldr	r2, [pc, #232]	; (80013ac <HAL_RCC_ClockConfig+0x128>)
 80012c2:	6921      	ldr	r1, [r4, #16]
 80012c4:	6893      	ldr	r3, [r2, #8]
 80012c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012d0:	f7ff ffaa 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_RCC_ClockConfig+0x128>)
 80012d6:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <HAL_RCC_ClockConfig+0x12c>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	40d8      	lsrs	r0, r3
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_RCC_ClockConfig+0x130>)
 80012e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fd70 	bl	8000dcc <HAL_InitTick>
  return HAL_OK;
 80012ec:	2000      	movs	r0, #0
 80012ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	b2ca      	uxtb	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d1c6      	bne.n	800128e <HAL_RCC_ClockConfig+0xa>
 8001300:	e7ce      	b.n	80012a0 <HAL_RCC_ClockConfig+0x1c>
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001308:	bf1e      	ittt	ne
 800130a:	689a      	ldrne	r2, [r3, #8]
 800130c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001310:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001312:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001314:	bf42      	ittt	mi
 8001316:	689a      	ldrmi	r2, [r3, #8]
 8001318:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800131c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	68a0      	ldr	r0, [r4, #8]
 8001322:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001326:	4302      	orrs	r2, r0
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	e7bc      	b.n	80012a6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132c:	6862      	ldr	r2, [r4, #4]
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_RCC_ClockConfig+0x128>)
 8001330:	2a01      	cmp	r2, #1
 8001332:	d11d      	bne.n	8001370 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	d0a8      	beq.n	800128e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133c:	4e1b      	ldr	r6, [pc, #108]	; (80013ac <HAL_RCC_ClockConfig+0x128>)
 800133e:	68b3      	ldr	r3, [r6, #8]
 8001340:	f023 0303 	bic.w	r3, r3, #3
 8001344:	4313      	orrs	r3, r2
 8001346:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001348:	f7ff fd8a 	bl	8000e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001350:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	68b3      	ldr	r3, [r6, #8]
 8001354:	6862      	ldr	r2, [r4, #4]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800135e:	d0a4      	beq.n	80012aa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001360:	f7ff fd7e 	bl	8000e60 <HAL_GetTick>
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	4540      	cmp	r0, r8
 8001368:	d9f3      	bls.n	8001352 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800136a:	2003      	movs	r0, #3
}
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001370:	1e91      	subs	r1, r2, #2
 8001372:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001374:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001376:	d802      	bhi.n	800137e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001378:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800137c:	e7dd      	b.n	800133a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137e:	f013 0f02 	tst.w	r3, #2
 8001382:	e7da      	b.n	800133a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001384:	b2ea      	uxtb	r2, r5
 8001386:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	429d      	cmp	r5, r3
 8001390:	f47f af7d 	bne.w	800128e <HAL_RCC_ClockConfig+0xa>
 8001394:	e78f      	b.n	80012b6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001396:	4905      	ldr	r1, [pc, #20]	; (80013ac <HAL_RCC_ClockConfig+0x128>)
 8001398:	68e0      	ldr	r0, [r4, #12]
 800139a:	688b      	ldr	r3, [r1, #8]
 800139c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013a0:	4303      	orrs	r3, r0
 80013a2:	608b      	str	r3, [r1, #8]
 80013a4:	e78a      	b.n	80012bc <HAL_RCC_ClockConfig+0x38>
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	0800533c 	.word	0x0800533c
 80013b4:	20002014 	.word	0x20002014

080013b8 <arm_sqrt_f32>:
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in >= 0.0f)
 80013b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
 80013c0:	b510      	push	{r4, lr}
 80013c2:	4604      	mov	r4, r0
    if(in >= 0.0f)
 80013c4:	db05      	blt.n	80013d2 <arm_sqrt_f32+0x1a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80013c6:	f001 f803 	bl	80023d0 <sqrtf>
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80013ca:	2000      	movs	r0, #0
      *pOut = __builtin_sqrtf(in);
 80013cc:	ed84 0a00 	vstr	s0, [r4]
      return (ARM_MATH_SUCCESS);
 80013d0:	bd10      	pop	{r4, pc}
    }
    else
    {
      *pOut = 0.0f;
 80013d2:	2300      	movs	r3, #0
 80013d4:	6003      	str	r3, [r0, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
 80013da:	bd10      	pop	{r4, pc}

080013dc <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 80013dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80013e0:	ea4f 0992 	mov.w	r9, r2, lsr #2
{
 80013e4:	4606      	mov	r6, r0
 80013e6:	460d      	mov	r5, r1
 80013e8:	4617      	mov	r7, r2
 80013ea:	4604      	mov	r4, r0
  blkCnt = numSamples >> 2u;
 80013ec:	46ca      	mov	sl, r9

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80013ee:	4688      	mov	r8, r1
 80013f0:	3420      	adds	r4, #32
 80013f2:	f1ba 0f00 	cmp.w	sl, #0
 80013f6:	d10d      	bne.n	8001414 <arm_cmplx_mag_f32+0x38>
 80013f8:	eb05 1009 	add.w	r0, r5, r9, lsl #4
    blkCnt--;
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 80013fc:	f007 0703 	and.w	r7, r7, #3
 8001400:	eb06 1649 	add.w	r6, r6, r9, lsl #5
 8001404:	eb00 0787 	add.w	r7, r0, r7, lsl #2

  while(blkCnt > 0u)
 8001408:	42b8      	cmp	r0, r7
 800140a:	f106 0608 	add.w	r6, r6, #8
 800140e:	d136      	bne.n	800147e <arm_cmplx_mag_f32+0xa2>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    imagIn = *pSrc++;
 8001414:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
    realIn = *pSrc++;
 8001418:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800141c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001420:	4640      	mov	r0, r8
 8001422:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8001426:	f7ff ffc7 	bl	80013b8 <arm_sqrt_f32>
    imagIn = *pSrc++;
 800142a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    realIn = *pSrc++;
 800142e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001432:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001436:	f108 0004 	add.w	r0, r8, #4
 800143a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800143e:	f7ff ffbb 	bl	80013b8 <arm_sqrt_f32>
    imagIn = *pSrc++;
 8001442:	ed14 0a03 	vldr	s0, [r4, #-12]
    realIn = *pSrc++;
 8001446:	ed54 7a04 	vldr	s15, [r4, #-16]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800144a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800144e:	f108 0008 	add.w	r0, r8, #8
 8001452:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8001456:	f7ff ffaf 	bl	80013b8 <arm_sqrt_f32>
    imagIn = *pSrc++;
 800145a:	ed14 0a01 	vldr	s0, [r4, #-4]
    realIn = *pSrc++;
 800145e:	ed54 7a02 	vldr	s15, [r4, #-8]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001462:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001466:	f108 0b0c 	add.w	fp, r8, #12
 800146a:	4658      	mov	r0, fp
 800146c:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8001470:	f108 0810 	add.w	r8, r8, #16
 8001474:	f7ff ffa0 	bl	80013b8 <arm_sqrt_f32>
    blkCnt--;
 8001478:	f10a 3aff 	add.w	sl, sl, #4294967295
 800147c:	e7b8      	b.n	80013f0 <arm_cmplx_mag_f32+0x14>
    imagIn = *pSrc++;
 800147e:	ed16 0a01 	vldr	s0, [r6, #-4]
    realIn = *pSrc++;
 8001482:	ed56 7a02 	vldr	s15, [r6, #-8]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001486:	ee20 0a00 	vmul.f32	s0, s0, s0
 800148a:	1d05      	adds	r5, r0, #4
 800148c:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8001490:	f7ff ff92 	bl	80013b8 <arm_sqrt_f32>
 8001494:	4628      	mov	r0, r5
 8001496:	e7b7      	b.n	8001408 <arm_cmplx_mag_f32+0x2c>

08001498 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Initialise the count value. */
  count = 0u;
  /* Initialise the index value to zero. */
  outIndex = 0u;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800149a:	edd0 7a00 	vldr	s15, [r0]

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800149e:	1e4c      	subs	r4, r1, #1
  out = *pSrc++;
 80014a0:	4605      	mov	r5, r0
 80014a2:	3514      	adds	r5, #20
 80014a4:	ea4f 0e94 	mov.w	lr, r4, lsr #2
 80014a8:	f044 0c03 	orr.w	ip, r4, #3

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80014ac:	2603      	movs	r6, #3
  outIndex = 0u;
 80014ae:	2700      	movs	r7, #0
  while(blkCnt > 0u)
 80014b0:	4566      	cmp	r6, ip
 80014b2:	d10b      	bne.n	80014cc <arm_max_f32+0x34>
 80014b4:	eb00 100e 	add.w	r0, r0, lr, lsl #4
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80014b8:	f004 0403 	and.w	r4, r4, #3
 80014bc:	3004      	adds	r0, #4
 80014be:	1b0c      	subs	r4, r1, r4

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80014c0:	42a1      	cmp	r1, r4
 80014c2:	d134      	bne.n	800152e <arm_max_f32+0x96>
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80014c4:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 80014c8:	601f      	str	r7, [r3, #0]
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    maxVal1 = *pSrc++;
 80014cc:	ed15 7a04 	vldr	s14, [r5, #-16]
    maxVal2 = *pSrc++;
 80014d0:	ed55 6a03 	vldr	s13, [r5, #-12]
    if(out < maxVal1)
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal1;
 80014dc:	bf48      	it	mi
 80014de:	eef0 7a47 	vmovmi.f32	s15, s14
    if(out < maxVal2)
 80014e2:	eef4 7ae6 	vcmpe.f32	s15, s13
    maxVal1 = *pSrc++;
 80014e6:	ed15 7a02 	vldr	s14, [r5, #-8]
      outIndex = count + 1u;
 80014ea:	bf48      	it	mi
 80014ec:	1eb7      	submi	r7, r6, #2
    if(out < maxVal2)
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal2;
 80014f2:	bf48      	it	mi
 80014f4:	eef0 7a66 	vmovmi.f32	s15, s13
    if(out < maxVal1)
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
      outIndex = count + 2u;
 80014fc:	bf48      	it	mi
 80014fe:	f106 37ff 	addmi.w	r7, r6, #4294967295
    maxVal2 = *pSrc++;
 8001502:	ed55 6a01 	vldr	s13, [r5, #-4]
    if(out < maxVal1)
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	bf58      	it	pl
 800150c:	eeb0 7a67 	vmovpl.f32	s14, s15
    if(out < maxVal2)
 8001510:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8001514:	bf48      	it	mi
 8001516:	4637      	movmi	r7, r6
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      out = maxVal2;
 800151c:	bf44      	itt	mi
 800151e:	eeb0 7a66 	vmovmi.f32	s14, s13
      outIndex = count + 4u;
 8001522:	1c77      	addmi	r7, r6, #1
 8001524:	3510      	adds	r5, #16
 8001526:	3604      	adds	r6, #4
  outIndex = 0u;
 8001528:	eef0 7a47 	vmov.f32	s15, s14
 800152c:	e7c0      	b.n	80014b0 <arm_max_f32+0x18>
    maxVal1 = *pSrc++;
 800152e:	ecb0 7a01 	vldmia	r0!, {s14}
    if(out < maxVal1)
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	bf54      	ite	pl
 800153c:	eeb0 7a67 	vmovpl.f32	s14, s15
 8001540:	4627      	movmi	r7, r4
 8001542:	eef0 7a47 	vmov.f32	s15, s14
 8001546:	3401      	adds	r4, #1
 8001548:	e7ba      	b.n	80014c0 <arm_max_f32+0x28>

0800154a <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800154a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800154e:	4681      	mov	r9, r0
 8001550:	ed2d 8b02 	vpush	{d8}
    uint32_t    L  = S->fftLen;
 8001554:	f8b9 7000 	ldrh.w	r7, [r9]
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001558:	f8d9 2004 	ldr.w	r2, [r9, #4]
    float32_t * p2 = p1 + L;
 800155c:	eb01 0887 	add.w	r8, r1, r7, lsl #2
{
 8001560:	4608      	mov	r0, r1

    pCol1 = p1;
    pCol2 = p2;

    //    Define new length
    L >>= 1;
 8001562:	0879      	lsrs	r1, r7, #1
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001564:	008b      	lsls	r3, r1, #2
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8001566:	08ff      	lsrs	r7, r7, #3
    pMid1 = p1 + L;
 8001568:	18c5      	adds	r5, r0, r3
 800156a:	4606      	mov	r6, r0
    pMid2 = p2 + L;
 800156c:	4443      	add	r3, r8
 800156e:	4644      	mov	r4, r8
 8001570:	eb02 1707 	add.w	r7, r2, r7, lsl #4
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001574:	4696      	mov	lr, r2
    for ( l = L >> 2; l > 0; l-- ) 
 8001576:	45be      	cmp	lr, r7
 8001578:	f106 0610 	add.w	r6, r6, #16
 800157c:	f105 0510 	add.w	r5, r5, #16
 8001580:	f103 0310 	add.w	r3, r3, #16
 8001584:	f104 0410 	add.w	r4, r4, #16
 8001588:	d10f      	bne.n	80015aa <arm_cfft_radix8by2_f32+0x60>
        *pMid2++ = m0 - m1;
        *pMid2++ = m2 + m3;
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 800158a:	b28c      	uxth	r4, r1
 800158c:	4621      	mov	r1, r4
 800158e:	2302      	movs	r3, #2
 8001590:	f000 fb2c 	bl	8001bec <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}
 8001594:	ecbd 8b02 	vpop	{d8}
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8001598:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800159c:	4621      	mov	r1, r4
 800159e:	4640      	mov	r0, r8
 80015a0:	2302      	movs	r3, #2
}
 80015a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80015a6:	f000 bb21 	b.w	8001bec <arm_radix8_butterfly_f32>
        t2[0] = p2[0];
 80015aa:	ed14 0a04 	vldr	s0, [r4, #-16]
        t1[0] = p1[0];
 80015ae:	ed16 6a04 	vldr	s12, [r6, #-16]
        t2[1] = p2[1];
 80015b2:	ed54 0a03 	vldr	s1, [r4, #-12]
        t1[1] = p1[1];
 80015b6:	ed16 4a03 	vldr	s8, [r6, #-12]
        t4[0] = pMid2[0];
 80015ba:	ed53 6a04 	vldr	s13, [r3, #-16]
        t4[1] = pMid2[1];
 80015be:	ed53 4a03 	vldr	s9, [r3, #-12]
        t2[2] = p2[2];
 80015c2:	ed14 7a02 	vldr	s14, [r4, #-8]
        t2[3] = p2[3];
 80015c6:	ed14 5a01 	vldr	s10, [r4, #-4]
        t3[1] = pMid1[1];
 80015ca:	ed55 2a03 	vldr	s5, [r5, #-12]
        t3[2] = pMid1[2];
 80015ce:	ed15 3a02 	vldr	s6, [r5, #-8]
        t3[3] = pMid1[3];
 80015d2:	ed55 3a01 	vldr	s7, [r5, #-4]
        t4[2] = pMid2[2];
 80015d6:	ed53 7a02 	vldr	s15, [r3, #-8]
        t4[3] = pMid2[3];
 80015da:	ed53 5a01 	vldr	s11, [r3, #-4]
        t1[2] = p1[2];
 80015de:	ed16 1a02 	vldr	s2, [r6, #-8]
        t3[0] = pMid1[0];
 80015e2:	ed15 2a04 	vldr	s4, [r5, #-16]
        t1[3] = p1[3];
 80015e6:	ed56 1a01 	vldr	s3, [r6, #-4]
        *p1++ = t1[0] + t2[0];
 80015ea:	ee36 8a00 	vadd.f32	s16, s12, s0
        t2[0] = t1[0] - t2[0];
 80015ee:	ee36 6a40 	vsub.f32	s12, s12, s0
        *p1++ = t1[0] + t2[0];
 80015f2:	ed06 8a04 	vstr	s16, [r6, #-16]
        *p1++ = t1[1] + t2[1];
 80015f6:	ee34 8a20 	vadd.f32	s16, s8, s1
        t2[1] = t1[1] - t2[1];
 80015fa:	ee34 4a60 	vsub.f32	s8, s8, s1
        *p1++ = t1[1] + t2[1];
 80015fe:	ed06 8a03 	vstr	s16, [r6, #-12]
        *p1++ = t1[2] + t2[2];
 8001602:	ee31 8a07 	vadd.f32	s16, s2, s14
 8001606:	f10e 0e10 	add.w	lr, lr, #16
 800160a:	ed06 8a02 	vstr	s16, [r6, #-8]
        *p1++ = t1[3] + t2[3];    // col 1
 800160e:	ee31 8a85 	vadd.f32	s16, s3, s10
        t2[3] = t1[3] - t2[3];    // for col 2
 8001612:	ee31 5ac5 	vsub.f32	s10, s3, s10
        *pMid1++ = t3[0] + t4[0];
 8001616:	ee72 1a26 	vadd.f32	s3, s4, s13
        *p1++ = t1[3] + t2[3];    // col 1
 800161a:	ed06 8a01 	vstr	s16, [r6, #-4]
        *pMid1++ = t3[0] + t4[0];
 800161e:	ed45 1a04 	vstr	s3, [r5, #-16]
        *pMid1++ = t3[1] + t4[1];
 8001622:	ee72 1aa4 	vadd.f32	s3, s5, s9
        t4[1] = t4[1] - t3[1];
 8001626:	ee74 4ae2 	vsub.f32	s9, s9, s5
        *pMid1++ = t3[1] + t4[1];
 800162a:	ed45 1a03 	vstr	s3, [r5, #-12]
        *pMid1++ = t3[2] + t4[2];
 800162e:	ee73 1a27 	vadd.f32	s3, s6, s15
        t4[2] = t4[2] - t3[2];
 8001632:	ee77 7ac3 	vsub.f32	s15, s15, s6
        *pMid1++ = t3[2] + t4[2];
 8001636:	ed45 1a02 	vstr	s3, [r5, #-8]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800163a:	ee73 1aa5 	vadd.f32	s3, s7, s11
        t4[3] = t4[3] - t3[3];    // for col 2
 800163e:	ee75 5ae3 	vsub.f32	s11, s11, s7
        *pMid1++ = t3[3] + t4[3]; // col 1
 8001642:	ed45 1a01 	vstr	s3, [r5, #-4]
        twI = *tw++;
 8001646:	ed5e 3a03 	vldr	s7, [lr, #-12]
        twR = *tw++;
 800164a:	ed1e 3a04 	vldr	s6, [lr, #-16]
        m1 = t2[1] * twI;
 800164e:	ee64 2a23 	vmul.f32	s5, s8, s7
        t4[0] = t4[0] - t3[0];
 8001652:	ee76 6ac2 	vsub.f32	s13, s13, s4
        *p2++ = m0 + m1;
 8001656:	eee6 2a03 	vfma.f32	s5, s12, s6
        *p2++ = m2 - m3;
 800165a:	ee23 6ac6 	vnmul.f32	s12, s7, s12
        *p2++ = m0 + m1;
 800165e:	ed44 2a04 	vstr	s5, [r4, #-16]
        *p2++ = m2 - m3;
 8001662:	eea4 6a03 	vfma.f32	s12, s8, s6
        t2[2] = t1[2] - t2[2];
 8001666:	ee31 7a47 	vsub.f32	s14, s2, s14
        *p2++ = m2 - m3;
 800166a:	ed04 6a03 	vstr	s12, [r4, #-12]
        *pMid2++ = m0 - m1;
 800166e:	ee23 6a64 	vnmul.f32	s12, s6, s9
 8001672:	eea6 6aa3 	vfma.f32	s12, s13, s7
        m3 = t4[0] * twR;
 8001676:	ee66 6a83 	vmul.f32	s13, s13, s6
        *pMid2++ = m0 - m1;
 800167a:	ed03 6a04 	vstr	s12, [r3, #-16]
        *pMid2++ = m2 + m3;
 800167e:	eee4 6aa3 	vfma.f32	s13, s9, s7
 8001682:	ed43 6a03 	vstr	s13, [r3, #-12]
        twR = *tw++;
 8001686:	ed1e 6a02 	vldr	s12, [lr, #-8]
        twI = *tw++;
 800168a:	ed5e 6a01 	vldr	s13, [lr, #-4]
        m1 = t2[3] * twI;
 800168e:	ee65 4a26 	vmul.f32	s9, s10, s13
        *p2++ = m0 + m1;
 8001692:	eee7 4a06 	vfma.f32	s9, s14, s12
        *p2++ = m2 - m3;
 8001696:	ee26 7ac7 	vnmul.f32	s14, s13, s14
        *p2++ = m0 + m1;
 800169a:	ed44 4a02 	vstr	s9, [r4, #-8]
        *p2++ = m2 - m3;
 800169e:	eea5 7a06 	vfma.f32	s14, s10, s12
 80016a2:	ed04 7a01 	vstr	s14, [r4, #-4]
        *pMid2++ = m0 - m1;
 80016a6:	ee26 7a65 	vnmul.f32	s14, s12, s11
 80016aa:	eea7 7aa6 	vfma.f32	s14, s15, s13
        m3 = t4[2] * twR;
 80016ae:	ee67 7a86 	vmul.f32	s15, s15, s12
        *pMid2++ = m0 - m1;
 80016b2:	ed03 7a02 	vstr	s14, [r3, #-8]
        *pMid2++ = m2 + m3;
 80016b6:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80016ba:	ed43 7a01 	vstr	s15, [r3, #-4]
 80016be:	e75a      	b.n	8001576 <arm_cfft_radix8by2_f32+0x2c>

080016c0 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80016c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c4:	ed2d 8b04 	vpush	{d8-d9}
 80016c8:	b08f      	sub	sp, #60	; 0x3c
 80016ca:	9003      	str	r0, [sp, #12]
    uint32_t    L  = S->fftLen >> 1;
 80016cc:	9b03      	ldr	r3, [sp, #12]
    pEnd1 = p2 - 1;     // points to imaginary values by default
    pEnd2 = p3 - 1;
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80016ce:	9a03      	ldr	r2, [sp, #12]
{
 80016d0:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen >> 1;
 80016d2:	8819      	ldrh	r1, [r3, #0]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80016d4:	ed90 7a00 	vldr	s14, [r0]
    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80016d8:	6852      	ldr	r2, [r2, #4]
 80016da:	9202      	str	r2, [sp, #8]
    uint32_t    L  = S->fftLen >> 1;
 80016dc:	0849      	lsrs	r1, r1, #1
    float32_t * p2 = p1 + L;
 80016de:	008b      	lsls	r3, r1, #2
 80016e0:	18c4      	adds	r4, r0, r3
    float32_t * p3 = p2 + L;
 80016e2:	18e6      	adds	r6, r4, r3
    p1ap3_0 = p1[0] + p3[0];
 80016e4:	edd6 7a00 	vldr	s15, [r6]
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 80016e8:	edd6 5a01 	vldr	s11, [r6, #4]
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80016ec:	edd4 4a00 	vldr	s9, [r4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80016f0:	edd4 3a01 	vldr	s7, [r4, #4]
    p1ap3_0 = p1[0] + p3[0];
 80016f4:	ee37 6a27 	vadd.f32	s12, s14, s15
    p1sp3_0 = p1[0] - p3[0];
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
    p1ap3_1 = p1[1] + p3[1];
 80016fc:	edd0 7a01 	vldr	s15, [r0, #4]
    float32_t * p4 = p3 + L;
 8001700:	18f5      	adds	r5, r6, r3
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001702:	ed95 5a00 	vldr	s10, [r5]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001706:	ed95 4a01 	vldr	s8, [r5, #4]
    p1ap3_1 = p1[1] + p3[1];
 800170a:	ee77 6aa5 	vadd.f32	s13, s15, s11
    p1sp3_1 = p1[1] - p3[1];
 800170e:	ee77 7ae5 	vsub.f32	s15, s15, s11
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001712:	ee76 5a24 	vadd.f32	s11, s12, s9
    L >>= 1;
 8001716:	084a      	lsrs	r2, r1, #1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001718:	ee75 5a85 	vadd.f32	s11, s11, s10
    L >>= 1;
 800171c:	9208      	str	r2, [sp, #32]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800171e:	ee15 1a90 	vmov	r1, s11
 8001722:	4602      	mov	r2, r0
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001724:	ee36 6a64 	vsub.f32	s12, s12, s9
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001728:	f842 1b08 	str.w	r1, [r2], #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800172c:	edd4 5a01 	vldr	s11, [r4, #4]
 8001730:	ed95 3a01 	vldr	s6, [r5, #4]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001734:	9209      	str	r2, [sp, #36]	; 0x24
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001736:	ee76 5aa5 	vadd.f32	s11, s13, s11

    // Twiddle factors are ones
    *p2++ = t2[0];
 800173a:	4622      	mov	r2, r4
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800173c:	ee75 5a83 	vadd.f32	s11, s11, s6
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001740:	ee36 6a45 	vsub.f32	s12, s12, s10
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001744:	edc0 5a01 	vstr	s11, [r0, #4]
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001748:	ee77 5a23 	vadd.f32	s11, s14, s7
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800174c:	ee37 7a63 	vsub.f32	s14, s14, s7
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001750:	ee75 5ac4 	vsub.f32	s11, s11, s8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001754:	ee76 6ae3 	vsub.f32	s13, s13, s7
    *p2++ = t2[0];
 8001758:	ee15 1a90 	vmov	r1, s11
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800175c:	ee77 5ae4 	vsub.f32	s11, s15, s9
    *p2++ = t2[0];
 8001760:	f842 1b08 	str.w	r1, [r2], #8
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001764:	ee75 5a85 	vadd.f32	s11, s11, s10
    *p2++ = t2[0];
 8001768:	920a      	str	r2, [sp, #40]	; 0x28
    *p2++ = t2[1];
    *p3++ = t3[0];
 800176a:	ee16 1a10 	vmov	r1, s12
 800176e:	4632      	mov	r2, r6
    *p2++ = t2[1];
 8001770:	edc4 5a01 	vstr	s11, [r4, #4]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001774:	ee37 7a04 	vadd.f32	s14, s14, s8
    *p3++ = t3[0];
 8001778:	f842 1b08 	str.w	r1, [r2], #8
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800177c:	ee76 6ac4 	vsub.f32	s13, s13, s8
    *p3++ = t3[0];
 8001780:	920b      	str	r2, [sp, #44]	; 0x2c
    *p3++ = t3[1];
    *p4++ = t4[0];
 8001782:	ee17 1a10 	vmov	r1, s14
 8001786:	462a      	mov	r2, r5
    *p3++ = t3[1];
 8001788:	edc6 6a01 	vstr	s13, [r6, #4]
    *p4++ = t4[0];
 800178c:	f842 1b08 	str.w	r1, [r2], #8
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001790:	ee77 7aa4 	vadd.f32	s15, s15, s9
    *p4++ = t4[0];
 8001794:	920c      	str	r2, [sp, #48]	; 0x30
    *p4++ = t4[1];

    tw2 += twMod2;
    tw3 += twMod3;
 8001796:	9a02      	ldr	r2, [sp, #8]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001798:	ee77 7ac5 	vsub.f32	s15, s15, s10
    tw3 += twMod3;
 800179c:	3210      	adds	r2, #16
    *p4++ = t4[1];
 800179e:	edc5 7a01 	vstr	s15, [r5, #4]
    tw3 += twMod3;
 80017a2:	920d      	str	r2, [sp, #52]	; 0x34
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80017a4:	9a08      	ldr	r2, [sp, #32]
 80017a6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80017aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80017b0:	1e91      	subs	r1, r2, #2
 80017b2:	084a      	lsrs	r2, r1, #1
 80017b4:	9204      	str	r2, [sp, #16]
 80017b6:	f1a5 0e04 	sub.w	lr, r5, #4
 80017ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80017bc:	9205      	str	r2, [sp, #20]
    pEnd4 = pEnd3 + L;
 80017be:	4473      	add	r3, lr
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80017c0:	9a04      	ldr	r2, [sp, #16]
 80017c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80017c4:	9207      	str	r2, [sp, #28]
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80017c6:	f1a4 0904 	sub.w	r9, r4, #4
    pEnd2 = p3 - 1;
 80017ca:	f1a6 0c04 	sub.w	ip, r6, #4
    pEnd4 = pEnd3 + L;
 80017ce:	9301      	str	r3, [sp, #4]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 80017d0:	2200      	movs	r2, #0
 80017d2:	9206      	str	r2, [sp, #24]
 80017d4:	9a05      	ldr	r2, [sp, #20]
 80017d6:	9b01      	ldr	r3, [sp, #4]
 80017d8:	3210      	adds	r2, #16
 80017da:	9205      	str	r2, [sp, #20]
 80017dc:	9a07      	ldr	r2, [sp, #28]
 80017de:	3b08      	subs	r3, #8
 80017e0:	f10a 0a08 	add.w	sl, sl, #8
 80017e4:	f1a9 0908 	sub.w	r9, r9, #8
 80017e8:	f1ac 0c08 	sub.w	ip, ip, #8
 80017ec:	f1ae 0e08 	sub.w	lr, lr, #8
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	3708      	adds	r7, #8
 80017f4:	f108 0808 	add.w	r8, r8, #8
 80017f8:	3108      	adds	r1, #8
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	f040 80ab 	bne.w	8001956 <arm_cfft_radix8by4_f32+0x296>
 8001800:	9b04      	ldr	r3, [sp, #16]
 8001802:	9a02      	ldr	r2, [sp, #8]
 8001804:	9904      	ldr	r1, [sp, #16]
 8001806:	00df      	lsls	r7, r3, #3
 8001808:	f107 0e08 	add.w	lr, r7, #8
 800180c:	4496      	add	lr, r2
 800180e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001812:	eb02 1a01 	add.w	sl, r2, r1, lsl #4
 8001816:	460a      	mov	r2, r1
 8001818:	9902      	ldr	r1, [sp, #8]
 800181a:	f04f 0c18 	mov.w	ip, #24
 800181e:	fb0c 1c02 	mla	ip, ip, r2, r1
 8001822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001824:	443a      	add	r2, r7
 8001826:	4690      	mov	r8, r2
 8001828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800182a:	edd8 2a00 	vldr	s5, [r8]
 800182e:	443a      	add	r2, r7
 8001830:	443b      	add	r3, r7
 8001832:	4691      	mov	r9, r2
    p1ap3_0 = p1[0] + p3[0];
 8001834:	ed99 7a00 	vldr	s14, [r9]
 8001838:	edd3 6a00 	vldr	s13, [r3]
    p1ap3_1 = p1[1] + p3[1];
 800183c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    p1ap3_0 = p1[0] + p3[0];
 8001842:	ee36 5a87 	vadd.f32	s10, s13, s14
    p1sp3_0 = p1[0] - p3[0];
 8001846:	ee76 6ac7 	vsub.f32	s13, s13, s14
    p1ap3_1 = p1[1] + p3[1];
 800184a:	ed99 7a01 	vldr	s14, [r9, #4]
 800184e:	ee77 5a87 	vadd.f32	s11, s15, s14
    p1sp3_1 = p1[1] - p3[1];
 8001852:	ee77 7ac7 	vsub.f32	s15, s15, s14
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001856:	ed98 7a01 	vldr	s14, [r8, #4]
 800185a:	443a      	add	r2, r7
 800185c:	ed92 2a01 	vldr	s4, [r2, #4]
 8001860:	ee36 6a87 	vadd.f32	s12, s13, s14
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001864:	ee35 4a62 	vsub.f32	s8, s10, s5
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001868:	ee36 3a42 	vsub.f32	s6, s12, s4
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800186c:	ee35 5a22 	vadd.f32	s10, s10, s5
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001870:	ed92 6a00 	vldr	s12, [r2]
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001874:	ee35 5a06 	vadd.f32	s10, s10, s12
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001878:	ee75 4ac7 	vsub.f32	s9, s11, s14
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800187c:	ed83 5a00 	vstr	s10, [r3]
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001880:	ee36 7ac7 	vsub.f32	s14, s13, s14
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001884:	edd8 6a01 	vldr	s13, [r8, #4]
 8001888:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800188c:	edd2 6a01 	vldr	s13, [r2, #4]
 8001890:	ee75 5aa6 	vadd.f32	s11, s11, s13
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001894:	ee77 3ae2 	vsub.f32	s7, s15, s5
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001898:	ee77 7aa2 	vadd.f32	s15, s15, s5
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800189c:	edc3 5a01 	vstr	s11, [r3, #4]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80018a0:	ee73 3a86 	vadd.f32	s7, s7, s12
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80018a4:	ee34 4a46 	vsub.f32	s8, s8, s12
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80018a8:	ee77 7ac6 	vsub.f32	s15, s15, s12

    // COL 2
    twR = tw2[0];
    twI = tw2[1];
 80018ac:	ed9e 6a01 	vldr	s12, [lr, #4]
    twR = tw2[0];
 80018b0:	edde 5a00 	vldr	s11, [lr]

    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
 80018b4:	ee63 6a86 	vmul.f32	s13, s7, s12
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
    *p2++ = m2 - m3;
 80018b8:	ee26 6a43 	vnmul.f32	s12, s12, s6
    *p2++ = m0 + m1;
 80018bc:	eee3 6a25 	vfma.f32	s13, s6, s11

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80018c0:	2304      	movs	r3, #4
    *p2++ = m2 - m3;
 80018c2:	eea3 6aa5 	vfma.f32	s12, s7, s11
    *p2++ = m0 + m1;
 80018c6:	edc8 6a00 	vstr	s13, [r8]
    *p2++ = m2 - m3;
 80018ca:	ed88 6a01 	vstr	s12, [r8, #4]
    twI = tw3[1];
 80018ce:	edda 6a01 	vldr	s13, [sl, #4]
    twR = tw3[0];
 80018d2:	edda 5a00 	vldr	s11, [sl]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80018d6:	ee74 4ac2 	vsub.f32	s9, s9, s4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80018da:	ee37 7a02 	vadd.f32	s14, s14, s4
    m1 = t3[1] * twI;
 80018de:	ee24 6aa6 	vmul.f32	s12, s9, s13
    *p3++ = m2 - m3;
 80018e2:	ee66 6ac4 	vnmul.f32	s13, s13, s8
    *p3++ = m0 + m1;
 80018e6:	eea4 6a25 	vfma.f32	s12, s8, s11
    *p3++ = m2 - m3;
 80018ea:	eee4 6aa5 	vfma.f32	s13, s9, s11
    *p3++ = m0 + m1;
 80018ee:	ed89 6a00 	vstr	s12, [r9]
    *p3++ = m2 - m3;
 80018f2:	edc9 6a01 	vstr	s13, [r9, #4]
    twI = tw4[1];
 80018f6:	eddc 6a07 	vldr	s13, [ip, #28]
    twR = tw4[0];
 80018fa:	eddc 5a06 	vldr	s11, [ip, #24]
    m1 = t4[1] * twI;
 80018fe:	ee27 6aa6 	vmul.f32	s12, s15, s13
    *p4++ = m0 + m1;
 8001902:	eea7 6a25 	vfma.f32	s12, s14, s11
    *p4++ = m2 - m3;
 8001906:	ee26 7ac7 	vnmul.f32	s14, s13, s14
    *p4++ = m0 + m1;
 800190a:	ed82 6a00 	vstr	s12, [r2]
    *p4++ = m2 - m3;
 800190e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8001912:	ed82 7a01 	vstr	s14, [r2, #4]
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8001916:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 800191a:	460a      	mov	r2, r1
 800191c:	4639      	mov	r1, r7
 800191e:	f000 f965 	bl	8001bec <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8001922:	9a03      	ldr	r2, [sp, #12]
 8001924:	4639      	mov	r1, r7
 8001926:	4620      	mov	r0, r4
 8001928:	2304      	movs	r3, #4
 800192a:	6852      	ldr	r2, [r2, #4]
 800192c:	f000 f95e 	bl	8001bec <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8001930:	9a03      	ldr	r2, [sp, #12]
 8001932:	4639      	mov	r1, r7
 8001934:	4630      	mov	r0, r6
 8001936:	2304      	movs	r3, #4
 8001938:	6852      	ldr	r2, [r2, #4]
 800193a:	f000 f957 	bl	8001bec <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800193e:	9a03      	ldr	r2, [sp, #12]
 8001940:	6852      	ldr	r2, [r2, #4]
 8001942:	2304      	movs	r3, #4
 8001944:	4639      	mov	r1, r7
 8001946:	4628      	mov	r0, r5
}
 8001948:	b00f      	add	sp, #60	; 0x3c
 800194a:	ecbd 8b04 	vpop	{d8-d9}
 800194e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8001952:	f000 b94b 	b.w	8001bec <arm_radix8_butterfly_f32>
        p1ap3_0 = p1[0] + p3[0];
 8001956:	ed58 7a02 	vldr	s15, [r8, #-8]
 800195a:	ed5a 6a02 	vldr	s13, [sl, #-8]
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800195e:	ed57 3a02 	vldr	s7, [r7, #-8]
        p1ap3_1 = p1[1] + p3[1];
 8001962:	ed1a 7a01 	vldr	s14, [sl, #-4]
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001966:	ed11 4a02 	vldr	s8, [r1, #-8]
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800196a:	ed11 3a01 	vldr	s6, [r1, #-4]
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	9a06      	ldr	r2, [sp, #24]
        p1ap3_0 = p1[0] + p3[0];
 8001972:	ee76 4aa7 	vadd.f32	s9, s13, s15
        p1sp3_0 = p1[0] - p3[0];
 8001976:	ee76 6ae7 	vsub.f32	s13, s13, s15
        p1ap3_1 = p1[1] + p3[1];
 800197a:	ed58 7a01 	vldr	s15, [r8, #-4]
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800197e:	ee34 6ae3 	vsub.f32	s12, s9, s7
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001982:	ee74 4aa3 	vadd.f32	s9, s9, s7
        p1ap3_1 = p1[1] + p3[1];
 8001986:	ee37 5a27 	vadd.f32	s10, s14, s15
        p1sp3_1 = p1[1] - p3[1];
 800198a:	ee37 7a67 	vsub.f32	s14, s14, s15
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 800198e:	ed57 7a01 	vldr	s15, [r7, #-4]
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001992:	ee74 4a84 	vadd.f32	s9, s9, s8
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001996:	ee76 5aa7 	vadd.f32	s11, s13, s15
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800199a:	ee77 1a63 	vsub.f32	s3, s14, s7
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800199e:	ee75 2a67 	vsub.f32	s5, s10, s15
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80019a2:	ee37 7a23 	vadd.f32	s14, s14, s7
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80019a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80019aa:	ed4a 4a02 	vstr	s9, [sl, #-8]
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80019ae:	ee77 7a83 	vadd.f32	s15, s15, s6
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80019b2:	ee75 5ac3 	vsub.f32	s11, s11, s6
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80019b6:	ee72 2ac3 	vsub.f32	s5, s5, s6
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80019ba:	ee37 3a44 	vsub.f32	s6, s14, s8
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80019be:	ed17 7a01 	vldr	s14, [r7, #-4]
 80019c2:	ee35 5a07 	vadd.f32	s10, s10, s14
 80019c6:	ed11 7a01 	vldr	s14, [r1, #-4]
 80019ca:	ee35 5a07 	vadd.f32	s10, s10, s14
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80019ce:	ee71 1a84 	vadd.f32	s3, s3, s8
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80019d2:	ed0a 5a01 	vstr	s10, [sl, #-4]
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80019d6:	ed9e 7a01 	vldr	s14, [lr, #4]
 80019da:	ed99 2a01 	vldr	s4, [r9, #4]
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80019de:	ed9c 8a02 	vldr	s16, [ip, #8]
 80019e2:	edd3 0a02 	vldr	s1, [r3, #8]
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80019e6:	edd3 3a01 	vldr	s7, [r3, #4]
 80019ea:	eddc 8a01 	vldr	s17, [ip, #4]
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80019ee:	ee32 5a07 	vadd.f32	s10, s4, s14
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80019f2:	ee36 6a44 	vsub.f32	s12, s12, s8
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80019f6:	ee32 2a47 	vsub.f32	s4, s4, s14
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80019fa:	ed99 4a02 	vldr	s8, [r9, #8]
 80019fe:	ed9e 7a02 	vldr	s14, [lr, #8]
 8001a02:	ee74 4a07 	vadd.f32	s9, s8, s14
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001a06:	ee34 4a47 	vsub.f32	s8, s8, s14
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001a0a:	ee34 7ac8 	vsub.f32	s14, s9, s16
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001a0e:	ee74 4a88 	vadd.f32	s9, s9, s16
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001a12:	ee35 1a68 	vsub.f32	s2, s10, s17
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001a16:	ee74 4aa0 	vadd.f32	s9, s9, s1
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001a1a:	ee74 6a68 	vsub.f32	s13, s8, s17
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001a1e:	edc9 4a02 	vstr	s9, [r9, #8]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001a22:	eddc 4a01 	vldr	s9, [ip, #4]
 8001a26:	ee35 5a24 	vadd.f32	s10, s10, s9
 8001a2a:	edd3 4a01 	vldr	s9, [r3, #4]
 8001a2e:	9b02      	ldr	r3, [sp, #8]
 8001a30:	ee35 5a24 	vadd.f32	s10, s10, s9
 8001a34:	eb03 0b02 	add.w	fp, r3, r2
 8001a38:	ed89 5a01 	vstr	s10, [r9, #4]
        twI = *tw2++;
 8001a3c:	ed9b 5a03 	vldr	s10, [fp, #12]
        twR = *tw2++;
 8001a40:	eddb 4a02 	vldr	s9, [fp, #8]
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001a44:	ee76 6aa3 	vadd.f32	s13, s13, s7
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001a48:	ee31 1a63 	vsub.f32	s2, s2, s7
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001a4c:	ee73 3ae8 	vsub.f32	s7, s7, s17
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001a50:	ee38 9a60 	vsub.f32	s18, s16, s1
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001a54:	ee33 4ac4 	vsub.f32	s8, s7, s8
        m1 = t2[1] * twI;
 8001a58:	ee61 3a85 	vmul.f32	s7, s3, s10
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001a5c:	ee32 0a09 	vadd.f32	s0, s4, s18
        *p2++ = m0 + m1;
 8001a60:	eee5 3aa4 	vfma.f32	s7, s11, s9
        *p2++ = m2 - m3;
 8001a64:	ee65 5a65 	vnmul.f32	s11, s10, s11
        *p2++ = m0 + m1;
 8001a68:	ed47 3a02 	vstr	s7, [r7, #-8]
        *p2++ = m2 - m3;
 8001a6c:	eee1 5aa4 	vfma.f32	s11, s3, s9
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001a70:	ee37 7a60 	vsub.f32	s14, s14, s1
        *p2++ = m2 - m3;
 8001a74:	ed47 5a01 	vstr	s11, [r7, #-4]
        *pEnd2-- = m0 - m1;
 8001a78:	ee64 5ac0 	vnmul.f32	s11, s9, s0
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001a7c:	ee39 2a42 	vsub.f32	s4, s18, s4
        *pEnd2-- = m0 - m1;
 8001a80:	eee6 5a85 	vfma.f32	s11, s13, s10
        m3 = t2[3] * twR;
 8001a84:	ee66 6aa4 	vmul.f32	s13, s13, s9
        *pEnd2-- = m0 - m1;
 8001a88:	edcc 5a02 	vstr	s11, [ip, #8]
        *pEnd2-- = m2 + m3;
 8001a8c:	eee0 6a05 	vfma.f32	s13, s0, s10
 8001a90:	edcc 6a01 	vstr	s13, [ip, #4]
        twR = tw3[0];
 8001a94:	9a05      	ldr	r2, [sp, #20]
        *pEnd4-- = m0 - m1;
 8001a96:	9b01      	ldr	r3, [sp, #4]
        twI = tw3[1];
 8001a98:	ed52 6a03 	vldr	s13, [r2, #-12]
        twR = tw3[0];
 8001a9c:	ed52 5a04 	vldr	s11, [r2, #-16]
 8001aa0:	9a06      	ldr	r2, [sp, #24]
        m1 = t3[1] * twI;
 8001aa2:	ee22 5aa6 	vmul.f32	s10, s5, s13
 8001aa6:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
        *p3++ = m0 + m1;
 8001aaa:	eea6 5a25 	vfma.f32	s10, s12, s11
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001aae:	9a07      	ldr	r2, [sp, #28]
        *p3++ = m2 - m3;
 8001ab0:	ee26 6ac6 	vnmul.f32	s12, s13, s12
        *p3++ = m0 + m1;
 8001ab4:	ed08 5a02 	vstr	s10, [r8, #-8]
        *p3++ = m2 - m3;
 8001ab8:	eea2 6aa5 	vfma.f32	s12, s5, s11
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001abc:	3a01      	subs	r2, #1
 8001abe:	9207      	str	r2, [sp, #28]
 8001ac0:	9a06      	ldr	r2, [sp, #24]
        *p3++ = m2 - m3;
 8001ac2:	ed08 6a01 	vstr	s12, [r8, #-4]
        *pEnd3-- = m0 - m1;
 8001ac6:	ee26 6ac1 	vnmul.f32	s12, s13, s2
        m3 = t3[3] * twI;
 8001aca:	ee67 6a26 	vmul.f32	s13, s14, s13
        *pEnd3-- = m0 - m1;
 8001ace:	eea7 6a65 	vfms.f32	s12, s14, s11
 8001ad2:	3208      	adds	r2, #8
        *pEnd3-- = m3 - m2;
 8001ad4:	eee1 6a65 	vfms.f32	s13, s2, s11
        *pEnd3-- = m0 - m1;
 8001ad8:	ed8e 6a02 	vstr	s12, [lr, #8]
        *pEnd3-- = m3 - m2;
 8001adc:	edce 6a01 	vstr	s13, [lr, #4]
        twI = tw4[1];
 8001ae0:	eddb 6a07 	vldr	s13, [fp, #28]
        twR = tw4[0];
 8001ae4:	ed9b 6a06 	vldr	s12, [fp, #24]
        m1 = t4[1] * twI;
 8001ae8:	ee23 7a26 	vmul.f32	s14, s6, s13
        *p4++ = m0 + m1;
 8001aec:	eea7 7a86 	vfma.f32	s14, s15, s12
 8001af0:	ed01 7a02 	vstr	s14, [r1, #-8]
        *p4++ = m2 - m3;
 8001af4:	ee26 7ae7 	vnmul.f32	s14, s13, s15
        *pEnd4-- = m0 - m1;
 8001af8:	ee66 7a42 	vnmul.f32	s15, s12, s4
        *p4++ = m2 - m3;
 8001afc:	eea3 7a06 	vfma.f32	s14, s6, s12
        *pEnd4-- = m0 - m1;
 8001b00:	eee4 7a26 	vfma.f32	s15, s8, s13
        *p4++ = m2 - m3;
 8001b04:	ed01 7a01 	vstr	s14, [r1, #-4]
        *pEnd4-- = m0 - m1;
 8001b08:	edc3 7a02 	vstr	s15, [r3, #8]
        m3 = t4[3] * twR;
 8001b0c:	ee64 7a06 	vmul.f32	s15, s8, s12
        *pEnd4-- = m2 + m3;
 8001b10:	eee2 7a26 	vfma.f32	s15, s4, s13
 8001b14:	edc3 7a01 	vstr	s15, [r3, #4]
 8001b18:	e65b      	b.n	80017d2 <arm_cfft_radix8by4_f32+0x112>

08001b1a <arm_cfft_f32>:
    uint8_t bitReverseFlag)
{
    uint32_t  L = S->fftLen, l;
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8001b1a:	2a01      	cmp	r2, #1
{
 8001b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b20:	4606      	mov	r6, r0
 8001b22:	460d      	mov	r5, r1
 8001b24:	4617      	mov	r7, r2
 8001b26:	4698      	mov	r8, r3
    uint32_t  L = S->fftLen, l;
 8001b28:	8804      	ldrh	r4, [r0, #0]
    if(ifftFlag == 1u)
 8001b2a:	d039      	beq.n	8001ba0 <arm_cfft_f32+0x86>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L) 
 8001b2c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001b30:	d049      	beq.n	8001bc6 <arm_cfft_f32+0xac>
 8001b32:	d821      	bhi.n	8001b78 <arm_cfft_f32+0x5e>
 8001b34:	2c20      	cmp	r4, #32
 8001b36:	d046      	beq.n	8001bc6 <arm_cfft_f32+0xac>
 8001b38:	d81a      	bhi.n	8001b70 <arm_cfft_f32+0x56>
 8001b3a:	2c10      	cmp	r4, #16
 8001b3c:	d03e      	beq.n	8001bbc <arm_cfft_f32+0xa2>
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
        break;
    }  

    if( bitReverseFlag )
 8001b3e:	f1b8 0f00 	cmp.w	r8, #0
 8001b42:	d004      	beq.n	8001b4e <arm_cfft_f32+0x34>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8001b44:	68b2      	ldr	r2, [r6, #8]
 8001b46:	89b1      	ldrh	r1, [r6, #12]
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f7fe fb3d 	bl	80001c8 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8001b4e:	2f01      	cmp	r7, #1
 8001b50:	d10c      	bne.n	8001b6c <arm_cfft_f32+0x52>
    {
        invL = 1.0f/(float32_t)L;
 8001b52:	ee07 4a90 	vmov	s15, r4
 8001b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8001b62:	2300      	movs	r3, #0
 8001b64:	42a3      	cmp	r3, r4
 8001b66:	f105 0508 	add.w	r5, r5, #8
 8001b6a:	d331      	bcc.n	8001bd0 <arm_cfft_f32+0xb6>
 8001b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (L) 
 8001b70:	2c40      	cmp	r4, #64	; 0x40
 8001b72:	d008      	beq.n	8001b86 <arm_cfft_f32+0x6c>
 8001b74:	2c80      	cmp	r4, #128	; 0x80
 8001b76:	e7e1      	b.n	8001b3c <arm_cfft_f32+0x22>
 8001b78:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001b7c:	d01e      	beq.n	8001bbc <arm_cfft_f32+0xa2>
 8001b7e:	d809      	bhi.n	8001b94 <arm_cfft_f32+0x7a>
 8001b80:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8001b84:	d1db      	bne.n	8001b3e <arm_cfft_f32+0x24>
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8001b86:	2301      	movs	r3, #1
 8001b88:	6872      	ldr	r2, [r6, #4]
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f000 f82d 	bl	8001bec <arm_radix8_butterfly_f32>
        break;
 8001b92:	e7d4      	b.n	8001b3e <arm_cfft_f32+0x24>
    switch (L) 
 8001b94:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8001b98:	d015      	beq.n	8001bc6 <arm_cfft_f32+0xac>
 8001b9a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001b9e:	e7f1      	b.n	8001b84 <arm_cfft_f32+0x6a>
        pSrc = p1 + 1;
 8001ba0:	1d0b      	adds	r3, r1, #4
        for(l=0; l<L; l++) 
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	42a2      	cmp	r2, r4
 8001ba6:	f103 0308 	add.w	r3, r3, #8
 8001baa:	d2bf      	bcs.n	8001b2c <arm_cfft_f32+0x12>
            *pSrc = -*pSrc;
 8001bac:	ed53 7a02 	vldr	s15, [r3, #-8]
 8001bb0:	eef1 7a67 	vneg.f32	s15, s15
 8001bb4:	ed43 7a02 	vstr	s15, [r3, #-8]
        for(l=0; l<L; l++) 
 8001bb8:	3201      	adds	r2, #1
 8001bba:	e7f3      	b.n	8001ba4 <arm_cfft_f32+0x8a>
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff fcc3 	bl	800154a <arm_cfft_radix8by2_f32>
        break;
 8001bc4:	e7bb      	b.n	8001b3e <arm_cfft_f32+0x24>
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f7ff fd79 	bl	80016c0 <arm_cfft_radix8by4_f32>
        break;
 8001bce:	e7b6      	b.n	8001b3e <arm_cfft_f32+0x24>
        {
            *pSrc++ *=   invL ;
 8001bd0:	ed55 7a02 	vldr	s15, [r5, #-8]
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
        for(l=0; l<L; l++) 
 8001bd8:	3301      	adds	r3, #1
            *pSrc++ *=   invL ;
 8001bda:	ed45 7a02 	vstr	s15, [r5, #-8]
            *pSrc  = -(*pSrc) * invL;
 8001bde:	ed55 7a01 	vldr	s15, [r5, #-4]
 8001be2:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8001be6:	ed45 7a01 	vstr	s15, [r5, #-4]
 8001bea:	e7bb      	b.n	8001b64 <arm_cfft_f32+0x4a>

08001bec <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8001bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf0:	ed2d 8b10 	vpush	{d8-d15}
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8001bf4:	eddf 5acc 	vldr	s11, [pc, #816]	; 8001f28 <arm_radix8_butterfly_f32+0x33c>
{
 8001bf8:	b09d      	sub	sp, #116	; 0x74
 8001bfa:	eeb0 5a65 	vmov.f32	s10, s11
 8001bfe:	910d      	str	r1, [sp, #52]	; 0x34
 8001c00:	9202      	str	r2, [sp, #8]
 8001c02:	9301      	str	r3, [sp, #4]
   n2 = fftLen;
 8001c04:	9103      	str	r1, [sp, #12]
      n2 = n2 >> 3;
 8001c06:	9b03      	ldr	r3, [sp, #12]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8001c0e:	1954      	adds	r4, r2, r5
 8001c10:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 8001c14:	4414      	add	r4, r2
 8001c16:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8001c1a:	4414      	add	r4, r2
 8001c1c:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8001c20:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 8001c24:	4414      	add	r4, r2
 8001c26:	00d9      	lsls	r1, r3, #3
 8001c28:	eb00 0c09 	add.w	ip, r0, r9
 8001c2c:	0113      	lsls	r3, r2, #4
 8001c2e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8001c32:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8001c36:	930c      	str	r3, [sp, #48]	; 0x30
 8001c38:	eb0c 0a09 	add.w	sl, ip, r9
 8001c3c:	f100 0804 	add.w	r8, r0, #4
 8001c40:	f10e 0e04 	add.w	lr, lr, #4
 8001c44:	3704      	adds	r7, #4
 8001c46:	3604      	adds	r6, #4
 8001c48:	3504      	adds	r5, #4
 8001c4a:	3404      	adds	r4, #4
      i1 = 0;
 8001c4c:	f04f 0b00 	mov.w	fp, #0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001c50:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8001c54:	ed18 7a01 	vldr	s14, [r8, #-4]
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001c58:	eddc 3a00 	vldr	s7, [ip]
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001c5c:	edda 4a00 	vldr	s9, [sl]
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001c60:	ed14 3a01 	vldr	s6, [r4, #-4]
 8001c64:	ed55 2a01 	vldr	s5, [r5, #-4]
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001c68:	ee77 6a27 	vadd.f32	s13, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001c70:	ed57 7a01 	vldr	s15, [r7, #-4]
 8001c74:	ee33 6aa7 	vadd.f32	s12, s7, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8001c78:	ee73 3ae7 	vsub.f32	s7, s7, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001c7c:	ed56 7a01 	vldr	s15, [r6, #-4]
 8001c80:	ee34 4aa7 	vadd.f32	s8, s9, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001c84:	ee74 7ae7 	vsub.f32	s15, s9, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001c88:	ee72 4a83 	vadd.f32	s9, s5, s6
         t1 = r1 - r3;
 8001c8c:	ee36 8ac4 	vsub.f32	s16, s13, s8
         r3 = r2 - r4;
 8001c90:	ee36 0a64 	vsub.f32	s0, s12, s9
         r1 = r1 + r3;
 8001c94:	ee76 6a84 	vadd.f32	s13, s13, s8
         r2 = r2 + r4;
 8001c98:	ee36 6a24 	vadd.f32	s12, s12, s9
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8001c9c:	ee72 2ac3 	vsub.f32	s5, s5, s6
         pSrc[2 * i1] = r1 + r2;   
 8001ca0:	ee76 4a86 	vadd.f32	s9, s13, s12
         pSrc[2 * i5] = r1 - r2;
 8001ca4:	ee76 6ac6 	vsub.f32	s13, s13, s12
         pSrc[2 * i1] = r1 + r2;   
 8001ca8:	ed48 4a01 	vstr	s9, [r8, #-4]
         pSrc[2 * i5] = r1 - r2;
 8001cac:	ed4e 6a01 	vstr	s13, [lr, #-4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001cb0:	edd8 4a00 	vldr	s9, [r8]
 8001cb4:	ed9e 6a00 	vldr	s12, [lr]
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001cb8:	ed9c 4a01 	vldr	s8, [ip, #4]
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001cbc:	ed9a 3a01 	vldr	s6, [sl, #4]
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001cc0:	edd4 1a00 	vldr	s3, [r4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001cc4:	ee74 6a86 	vadd.f32	s13, s9, s12
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001cc8:	ee34 6ac6 	vsub.f32	s12, s9, s12
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001ccc:	edd7 4a00 	vldr	s9, [r7]
 8001cd0:	ee34 2a24 	vadd.f32	s4, s8, s9
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001cd4:	ee34 4a64 	vsub.f32	s8, s8, s9
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001cd8:	edd6 4a00 	vldr	s9, [r6]
 8001cdc:	ee33 1a24 	vadd.f32	s2, s6, s9
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8001ce0:	ee73 4a64 	vsub.f32	s9, s6, s9
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001ce4:	ed95 3a00 	vldr	s6, [r5]
 8001ce8:	ee73 0a21 	vadd.f32	s1, s6, s3
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8001cec:	ee33 3a61 	vsub.f32	s6, s6, s3
         t2 = r1 - s3;
 8001cf0:	ee76 1ac1 	vsub.f32	s3, s13, s2
         r1 = r1 + s3;
 8001cf4:	ee76 6a81 	vadd.f32	s13, s13, s2
         s3 = r2 - r4;
 8001cf8:	ee32 1a60 	vsub.f32	s2, s4, s1
         r2 = r2 + r4;
 8001cfc:	ee32 2a20 	vadd.f32	s4, s4, s1
         pSrc[2 * i1 + 1] = r1 + r2;
 8001d00:	ee76 0a82 	vadd.f32	s1, s13, s4
         pSrc[2 * i5 + 1] = r1 - r2;
 8001d04:	ee76 6ac2 	vsub.f32	s13, s13, s4
         pSrc[2 * i1 + 1] = r1 + r2;
 8001d08:	edc8 0a00 	vstr	s1, [r8]
         pSrc[2 * i5 + 1] = r1 - r2;
 8001d0c:	edce 6a00 	vstr	s13, [lr]
         pSrc[2 * i3]     = t1 + s3;
 8001d10:	ee78 6a01 	vadd.f32	s13, s16, s2
         pSrc[2 * i7]     = t1 - s3;
 8001d14:	ee38 2a41 	vsub.f32	s4, s16, s2
         pSrc[2 * i3]     = t1 + s3;
 8001d18:	edca 6a00 	vstr	s13, [sl]
         pSrc[2 * i3 + 1] = t2 - r3;
 8001d1c:	ee71 6ac0 	vsub.f32	s13, s3, s0
         pSrc[2 * i7]     = t1 - s3;
 8001d20:	ed06 2a01 	vstr	s4, [r6, #-4]
         pSrc[2 * i3 + 1] = t2 - r3;
 8001d24:	edca 6a01 	vstr	s13, [sl, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 8001d28:	ee70 6a21 	vadd.f32	s13, s0, s3
         r2 = (s6 - s8) * C81;
 8001d2c:	ee34 2a43 	vsub.f32	s4, s8, s6
         pSrc[2 * i7 + 1] = t2 + r3;
 8001d30:	edc6 6a00 	vstr	s13, [r6]
         r6 = (r6 + r8) * C81;
 8001d34:	ee73 6aa2 	vadd.f32	s13, s7, s5
         r1 = (r6 - r8) * C81;
 8001d38:	ee73 1ae2 	vsub.f32	s3, s7, s5
         s6 = (s6 + s8) * C81;
 8001d3c:	ee34 4a03 	vadd.f32	s8, s8, s6
         r5 = r5 + r1;
         r8 = r7 - r6;
 8001d40:	eef0 3a67 	vmov.f32	s7, s15
 8001d44:	eee6 3ae5 	vfms.f32	s7, s13, s11
 8001d48:	448a      	add	sl, r1
 8001d4a:	4488      	add	r8, r1
         r7 = r7 + r6;
 8001d4c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8001d50:	448e      	add	lr, r1
 8001d52:	440e      	add	r6, r1
         t2 = s5 - r2;
 8001d54:	eef0 2a46 	vmov.f32	s5, s12
         s5 = s5 + r2;
 8001d58:	eef0 6a46 	vmov.f32	s13, s12
         s8 = s7 - s6;
         s7 = s7 + s6;
 8001d5c:	eeb0 6a64 	vmov.f32	s12, s9
         t1 = r5 - r1;
 8001d60:	eeb0 3a47 	vmov.f32	s6, s14
         s7 = s7 + s6;
 8001d64:	eea4 6a25 	vfma.f32	s12, s8, s11
         r5 = r5 + r1;
 8001d68:	eea1 7aa5 	vfma.f32	s14, s3, s11
         t2 = s5 - r2;
 8001d6c:	eee2 2a65 	vfms.f32	s5, s4, s11
         s5 = s5 + r2;
 8001d70:	eee2 6a25 	vfma.f32	s13, s4, s11
         s8 = s7 - s6;
 8001d74:	eeb0 2a64 	vmov.f32	s4, s9
         t1 = r5 - r1;
 8001d78:	eea1 3ae5 	vfms.f32	s6, s3, s11
         s8 = s7 - s6;
 8001d7c:	eea4 2a65 	vfms.f32	s4, s8, s11
         pSrc[2 * i2]     = r5 + s7;
 8001d80:	ee77 4a06 	vadd.f32	s9, s14, s12
         pSrc[2 * i8]     = r5 - s7;
 8001d84:	ee37 7a46 	vsub.f32	s14, s14, s12
         pSrc[2 * i2]     = r5 + s7;
 8001d88:	edcc 4a00 	vstr	s9, [ip]
         pSrc[2 * i8]     = r5 - s7;
 8001d8c:	ed04 7a01 	vstr	s14, [r4, #-4]
         pSrc[2 * i6]     = t1 + s8;
 8001d90:	ee33 7a02 	vadd.f32	s14, s6, s4
         pSrc[2 * i4]     = t1 - s8;
 8001d94:	ee33 3a42 	vsub.f32	s6, s6, s4
         pSrc[2 * i6]     = t1 + s8;
 8001d98:	ed07 7a01 	vstr	s14, [r7, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001d9c:	ee36 7ae7 	vsub.f32	s14, s13, s15
         pSrc[2 * i8 + 1] = s5 + r7;
 8001da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i4]     = t1 - s8;
 8001da4:	ed05 3a01 	vstr	s6, [r5, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
 8001da8:	ed8c 7a01 	vstr	s14, [ip, #4]
         pSrc[2 * i8 + 1] = s5 + r7;
 8001dac:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8001db0:	ee72 7ae3 	vsub.f32	s15, s5, s7
         pSrc[2 * i4 + 1] = t2 + r8;
 8001db4:	ee73 3aa2 	vadd.f32	s7, s7, s5
         pSrc[2 * i6 + 1] = t2 - r8;
 8001db8:	edc7 7a00 	vstr	s15, [r7]
         pSrc[2 * i4 + 1] = t2 + r8;
 8001dbc:	edc5 3a00 	vstr	s7, [r5]
         
         i1 += n1;
 8001dc0:	9b03      	ldr	r3, [sp, #12]
 8001dc2:	449b      	add	fp, r3
      } while(i1 < fftLen);
 8001dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001dc6:	455b      	cmp	r3, fp
 8001dc8:	448c      	add	ip, r1
 8001dca:	440f      	add	r7, r1
 8001dcc:	440d      	add	r5, r1
 8001dce:	440c      	add	r4, r1
 8001dd0:	f63f af3e 	bhi.w	8001c50 <arm_radix8_butterfly_f32+0x64>
      
      if(n2 < 8)
 8001dd4:	2a07      	cmp	r2, #7
 8001dd6:	f240 81d2 	bls.w	800217e <arm_radix8_butterfly_f32+0x592>
 8001dda:	9b01      	ldr	r3, [sp, #4]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	9310      	str	r3, [sp, #64]	; 0x40
 8001de0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001de2:	9b02      	ldr	r3, [sp, #8]
 8001de4:	4423      	add	r3, r4
 8001de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001de8:	9b01      	ldr	r3, [sp, #4]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8001dee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001df0:	9b02      	ldr	r3, [sp, #8]
 8001df2:	4423      	add	r3, r4
 8001df4:	930a      	str	r3, [sp, #40]	; 0x28
 8001df6:	9b01      	ldr	r3, [sp, #4]
 8001df8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001dfc:	00e3      	lsls	r3, r4, #3
 8001dfe:	9314      	str	r3, [sp, #80]	; 0x50
 8001e00:	9b02      	ldr	r3, [sp, #8]
 8001e02:	00e5      	lsls	r5, r4, #3
 8001e04:	442b      	add	r3, r5
 8001e06:	9309      	str	r3, [sp, #36]	; 0x24
 8001e08:	9b01      	ldr	r3, [sp, #4]
 8001e0a:	441c      	add	r4, r3
 8001e0c:	00e3      	lsls	r3, r4, #3
 8001e0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001e10:	9b02      	ldr	r3, [sp, #8]
 8001e12:	00e5      	lsls	r5, r4, #3
 8001e14:	442b      	add	r3, r5
 8001e16:	9308      	str	r3, [sp, #32]
 8001e18:	9b01      	ldr	r3, [sp, #4]
 8001e1a:	441c      	add	r4, r3
 8001e1c:	00e3      	lsls	r3, r4, #3
 8001e1e:	9312      	str	r3, [sp, #72]	; 0x48
 8001e20:	9b02      	ldr	r3, [sp, #8]
 8001e22:	00e5      	lsls	r5, r4, #3
 8001e24:	442b      	add	r3, r5
 8001e26:	9307      	str	r3, [sp, #28]
 8001e28:	9b01      	ldr	r3, [sp, #4]
 8001e2a:	441c      	add	r4, r3
 8001e2c:	00e3      	lsls	r3, r4, #3
 8001e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8001e30:	9b02      	ldr	r3, [sp, #8]
 8001e32:	00e5      	lsls	r5, r4, #3
 8001e34:	442b      	add	r3, r5
 8001e36:	9306      	str	r3, [sp, #24]
 8001e38:	9b01      	ldr	r3, [sp, #4]
 8001e3a:	441c      	add	r4, r3
 8001e3c:	00e3      	lsls	r3, r4, #3
 8001e3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001e40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	4423      	add	r3, r4
 8001e46:	9305      	str	r3, [sp, #20]
 8001e48:	2328      	movs	r3, #40	; 0x28
 8001e4a:	fb03 fe02 	mul.w	lr, r3, r2
 8001e4e:	2330      	movs	r3, #48	; 0x30
 8001e50:	fb03 f702 	mul.w	r7, r3, r2
 8001e54:	2318      	movs	r3, #24
 8001e56:	fb03 f602 	mul.w	r6, r3, r2
 8001e5a:	2338      	movs	r3, #56	; 0x38
 8001e5c:	fb03 f502 	mul.w	r5, r3, r2
 8001e60:	ea4f 1c42 	mov.w	ip, r2, lsl #5
 8001e64:	2301      	movs	r3, #1
 8001e66:	9304      	str	r3, [sp, #16]
 8001e68:	f10c 030c 	add.w	r3, ip, #12
 8001e6c:	9315      	str	r3, [sp, #84]	; 0x54
 8001e6e:	f109 030c 	add.w	r3, r9, #12
 8001e72:	9316      	str	r3, [sp, #88]	; 0x58
 8001e74:	f10e 030c 	add.w	r3, lr, #12
 8001e78:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	9318      	str	r3, [sp, #96]	; 0x60
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	9319      	str	r3, [sp, #100]	; 0x64
 8001e86:	f106 030c 	add.w	r3, r6, #12
 8001e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8001e8c:	f105 030c 	add.w	r3, r5, #12
 8001e90:	2400      	movs	r4, #0
 8001e92:	931b      	str	r3, [sp, #108]	; 0x6c
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;
                  
         co2 = pCoef[2 * ia1];
 8001e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e96:	edd3 1a00 	vldr	s3, [r3]
         co3 = pCoef[2 * ia2];
 8001e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e9c:	ed93 8a00 	vldr	s16, [r3]
         co4 = pCoef[2 * ia3];
 8001ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ea2:	edd3 4a00 	vldr	s9, [r3]
         co5 = pCoef[2 * ia4];
 8001ea6:	9b08      	ldr	r3, [sp, #32]
 8001ea8:	ed93 9a00 	vldr	s18, [r3]
         co6 = pCoef[2 * ia5];
 8001eac:	9b07      	ldr	r3, [sp, #28]
 8001eae:	edd3 3a00 	vldr	s7, [r3]
         co7 = pCoef[2 * ia6];
 8001eb2:	9b06      	ldr	r3, [sp, #24]
 8001eb4:	edd3 0a00 	vldr	s1, [r3]
         co8 = pCoef[2 * ia7];
 8001eb8:	9b05      	ldr	r3, [sp, #20]
 8001eba:	edd3 2a00 	vldr	s5, [r3]
         si2 = pCoef[2 * ia1 + 1];
 8001ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ec0:	ed93 1a01 	vldr	s2, [r3, #4]
         si3 = pCoef[2 * ia2 + 1];
 8001ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ec6:	edd3 8a01 	vldr	s17, [r3, #4]
         si4 = pCoef[2 * ia3 + 1];
 8001eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ecc:	ed93 4a01 	vldr	s8, [r3, #4]
         si5 = pCoef[2 * ia4 + 1];
 8001ed0:	9b08      	ldr	r3, [sp, #32]
 8001ed2:	edd3 9a01 	vldr	s19, [r3, #4]
         si6 = pCoef[2 * ia5 + 1];
 8001ed6:	9b07      	ldr	r3, [sp, #28]
 8001ed8:	ed93 3a01 	vldr	s6, [r3, #4]
         si7 = pCoef[2 * ia6 + 1];
 8001edc:	9b06      	ldr	r3, [sp, #24]
 8001ede:	ed93 0a01 	vldr	s0, [r3, #4]
         si8 = pCoef[2 * ia7 + 1];         
 8001ee2:	9b05      	ldr	r3, [sp, #20]
 8001ee4:	ed93 2a01 	vldr	s4, [r3, #4]
 8001ee8:	9b04      	ldr	r3, [sp, #16]
 8001eea:	eb00 0ac3 	add.w	sl, r0, r3, lsl #3
 8001eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001ef0:	eb03 0904 	add.w	r9, r3, r4
 8001ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001ef6:	eb03 0804 	add.w	r8, r3, r4
 8001efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001efc:	eb03 0c04 	add.w	ip, r3, r4
 8001f00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001f02:	eb03 0e04 	add.w	lr, r3, r4
 8001f06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001f08:	191f      	adds	r7, r3, r4
 8001f0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001f0c:	191e      	adds	r6, r3, r4
 8001f0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001f10:	191d      	adds	r5, r3, r4
         
         i1 = j;
 8001f12:	9b04      	ldr	r3, [sp, #16]
 8001f14:	930c      	str	r3, [sp, #48]	; 0x30
 8001f16:	4481      	add	r9, r0
 8001f18:	4480      	add	r8, r0
 8001f1a:	4484      	add	ip, r0
 8001f1c:	4486      	add	lr, r0
 8001f1e:	4407      	add	r7, r0
 8001f20:	4406      	add	r6, r0
 8001f22:	4405      	add	r5, r0
 8001f24:	e002      	b.n	8001f2c <arm_radix8_butterfly_f32+0x340>
 8001f26:	bf00      	nop
 8001f28:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001f2c:	ed59 7a01 	vldr	s15, [r9, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001f30:	ed58 6a01 	vldr	s13, [r8, #-4]
 8001f34:	ed1c 7a01 	vldr	s14, [ip, #-4]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001f38:	ed9a aa00 	vldr	s20, [sl]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001f3c:	ed1e ba01 	vldr	s22, [lr, #-4]
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001f40:	ed16 ea01 	vldr	s28, [r6, #-4]
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8001f44:	ee3a 6a27 	vadd.f32	s12, s20, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8001f48:	ee36 dac7 	vsub.f32	s26, s13, s14
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8001f4c:	ee3a aa67 	vsub.f32	s20, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8001f50:	ee76 7a87 	vadd.f32	s15, s13, s14
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8001f54:	ed57 6a01 	vldr	s13, [r7, #-4]
 8001f58:	ee3b 7a26 	vadd.f32	s14, s22, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8001f5c:	ee3b ba66 	vsub.f32	s22, s22, s13
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8001f60:	ed55 6a01 	vldr	s13, [r5, #-4]
 8001f64:	ee7e aa26 	vadd.f32	s21, s28, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
 8001f68:	ee36 fa47 	vsub.f32	s30, s12, s14
            r1 = r1 + r3;
            r3 = r2 - r4;
 8001f6c:	ee77 eaea 	vsub.f32	s29, s15, s21
            r1 = r1 + r3;
 8001f70:	ee36 6a07 	vadd.f32	s12, s12, s14
            r2 = r2 + r4;
 8001f74:	ee77 7aaa 	vadd.f32	s15, s15, s21
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8001f78:	ee3e ea66 	vsub.f32	s28, s28, s13
            pSrc[2 * i1] = r1 + r2;
 8001f7c:	ee36 7a27 	vadd.f32	s14, s12, s15
            r2 = r1 - r2;
 8001f80:	ee76 aa67 	vsub.f32	s21, s12, s15
            pSrc[2 * i1] = r1 + r2;
 8001f84:	ed8a 7a00 	vstr	s14, [sl]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001f88:	ed9a 6a01 	vldr	s12, [sl, #4]
 8001f8c:	edd9 7a00 	vldr	s15, [r9]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001f90:	edd8 ca00 	vldr	s25, [r8]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001f94:	edde 6a00 	vldr	s13, [lr]
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001f98:	edd6 fa00 	vldr	s31, [r6]
 8001f9c:	edd5 da00 	vldr	s27, [r5]
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8001fa0:	ee36 7a27 	vadd.f32	s14, s12, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8001fa4:	ee76 ba67 	vsub.f32	s23, s12, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8001fa8:	eddc 7a00 	vldr	s15, [ip]
 8001fac:	ee3c 6aa7 	vadd.f32	s12, s25, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8001fb0:	ee7c cae7 	vsub.f32	s25, s25, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8001fb4:	edd7 7a00 	vldr	s15, [r7]
 8001fb8:	ee36 caa7 	vadd.f32	s24, s13, s15
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8001fbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8001fc0:	ee7f 6aad 	vadd.f32	s13, s31, s27
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8001fc4:	ee7f daed 	vsub.f32	s27, s31, s27
            t2 = s1 - s3;
 8001fc8:	ee77 fa4c 	vsub.f32	s31, s14, s24
            s1 = s1 + s3;
 8001fcc:	ee37 ca0c 	vadd.f32	s24, s14, s24
            s3 = s2 - s4;
 8001fd0:	ee36 7a66 	vsub.f32	s14, s12, s13
            s2 = s2 + s4;
 8001fd4:	ee36 6a26 	vadd.f32	s12, s12, s13
            r1 = t1 + s3;
 8001fd8:	ee7f 6a07 	vadd.f32	s13, s30, s14
            t1 = t1 - s3;
 8001fdc:	ee3f 7a47 	vsub.f32	s14, s30, s14
            pSrc[2 * i1 + 1] = s1 + s2;
 8001fe0:	ee3c fa06 	vadd.f32	s30, s24, s12
            s2 = s1 - s2;
 8001fe4:	ee3c ca46 	vsub.f32	s24, s24, s12
            pSrc[2 * i1 + 1] = s1 + s2;
 8001fe8:	ed8a fa01 	vstr	s30, [sl, #4]
            s1 = t2 - r3;
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
 8001fec:	ee29 6a8c 	vmul.f32	s12, s19, s24
            s1 = t2 - r3;
 8001ff0:	ee3f faee 	vsub.f32	s30, s31, s29
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 8001ff4:	eea9 6a2a 	vfma.f32	s12, s18, s21
 8001ff8:	448a      	add	sl, r1
            t2 = t2 + r3;
 8001ffa:	ee7e eaaf 	vadd.f32	s29, s29, s31
            pSrc[2 * i5]     = p1 + p2;
 8001ffe:	ed09 6a01 	vstr	s12, [r9, #-4]
            pSrc[2 * i5 + 1] = p3 - p4;
 8002002:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
 8002006:	ee7d aa4e 	vsub.f32	s21, s26, s28
            pSrc[2 * i5 + 1] = p3 - p4;
 800200a:	eea9 6a0c 	vfma.f32	s12, s18, s24
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 800200e:	eeb0 ca4a 	vmov.f32	s24, s20
            pSrc[2 * i5 + 1] = p3 - p4;
 8002012:	ed89 6a00 	vstr	s12, [r9]
            p2 = si3 * s1;
 8002016:	ee28 6a8f 	vmul.f32	s12, s17, s30
            t1 = r5 - r1;
 800201a:	eeaa cac5 	vfms.f32	s24, s21, s10
 800201e:	4489      	add	r9, r1
            pSrc[2 * i3]     = p1 + p2;
 8002020:	eea8 6a26 	vfma.f32	s12, s16, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 8002024:	ee66 6ae8 	vnmul.f32	s13, s13, s17
            pSrc[2 * i3]     = p1 + p2;
 8002028:	ed0e 6a01 	vstr	s12, [lr, #-4]
            pSrc[2 * i3 + 1] = p3 - p4;
 800202c:	eee8 6a0f 	vfma.f32	s13, s16, s30
            s1 = (s6 - s8) * C81;
 8002030:	ee3c 6aed 	vsub.f32	s12, s25, s27
            pSrc[2 * i3 + 1] = p3 - p4;
 8002034:	edce 6a00 	vstr	s13, [lr]
            p2 = si7 * t2;
 8002038:	ee60 6a2e 	vmul.f32	s13, s0, s29
            r5 = r5 + r1;
 800203c:	eeaa aa85 	vfma.f32	s20, s21, s10
 8002040:	448e      	add	lr, r1
            pSrc[2 * i7]     = p1 + p2;
 8002042:	eee0 6a87 	vfma.f32	s13, s1, s14
            pSrc[2 * i7 + 1] = p3 - p4;
 8002046:	ee27 7a40 	vnmul.f32	s14, s14, s0
            pSrc[2 * i7]     = p1 + p2;
 800204a:	ed47 6a01 	vstr	s13, [r7, #-4]
            pSrc[2 * i7 + 1] = p3 - p4;
 800204e:	eea0 7aae 	vfma.f32	s14, s1, s29
            r6 = (r6 + r8) * C81;
 8002052:	ee7d 6a0e 	vadd.f32	s13, s26, s28
            pSrc[2 * i7 + 1] = p3 - p4;
 8002056:	ed87 7a00 	vstr	s14, [r7]
            s6 = (s6 + s8) * C81;
 800205a:	ee3c 7aad 	vadd.f32	s14, s25, s27
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
 800205e:	eef0 ca6b 	vmov.f32	s25, s23
            s5 = s5 + s1;
 8002062:	eee6 ba05 	vfma.f32	s23, s12, s10
 8002066:	440f      	add	r7, r1
            t2 = s5 - s1;
 8002068:	eee6 ca45 	vfms.f32	s25, s12, s10
            s5 = s5 + s1;
 800206c:	eeb0 6a6b 	vmov.f32	s12, s23
            s8 = s7 - s6;
 8002070:	eef0 ba67 	vmov.f32	s23, s15
 8002074:	eee7 ba45 	vfms.f32	s23, s14, s10
            s7 = s7 + s6;
 8002078:	eee7 7a05 	vfma.f32	s15, s14, s10
            r8 = r7 - r6;
 800207c:	eef0 aa4b 	vmov.f32	s21, s22
            r7 = r7 + r6;
 8002080:	eea6 ba85 	vfma.f32	s22, s13, s10
            r1 = r5 + s7;
            r5 = r5 - s7;
            r6 = t1 + s8;
 8002084:	ee3c 7a2b 	vadd.f32	s14, s24, s23
            r8 = r7 - r6;
 8002088:	eee6 aac5 	vfms.f32	s21, s13, s10
            r1 = r5 + s7;
 800208c:	ee7a 6a27 	vadd.f32	s13, s20, s15
            r5 = r5 - s7;
 8002090:	ee7a 7a67 	vsub.f32	s15, s20, s15
            t1 = t1 - s8;
 8002094:	ee3c aa6b 	vsub.f32	s20, s24, s23
            s1 = s5 - r7;
 8002098:	ee36 ca4b 	vsub.f32	s24, s12, s22
            s5 = s5 + r7;
 800209c:	ee3b 6a06 	vadd.f32	s12, s22, s12
            s6 = t2 - r8;
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
 80020a0:	ee61 ba0c 	vmul.f32	s23, s2, s24
            s6 = t2 - r8;
 80020a4:	ee3c baea 	vsub.f32	s22, s25, s21
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 80020a8:	eee1 baa6 	vfma.f32	s23, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
 80020ac:	ee66 6ac1 	vnmul.f32	s13, s13, s2
            pSrc[2 * i2]     = p1 + p2;
 80020b0:	ed48 ba01 	vstr	s23, [r8, #-4]
            pSrc[2 * i2 + 1] = p3 - p4;
 80020b4:	eee1 6a8c 	vfma.f32	s13, s3, s24
            t2 = t2 + r8;
 80020b8:	ee7a aaac 	vadd.f32	s21, s21, s25
            pSrc[2 * i2 + 1] = p3 - p4;
 80020bc:	edc8 6a00 	vstr	s13, [r8]
            p1 = co8 * r5;
            p2 = si8 * s5;
 80020c0:	ee62 6a06 	vmul.f32	s13, s4, s12
 80020c4:	4488      	add	r8, r1
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 80020c6:	eee2 6aa7 	vfma.f32	s13, s5, s15
 80020ca:	ed45 6a01 	vstr	s13, [r5, #-4]
            pSrc[2 * i8 + 1] = p3 - p4;
 80020ce:	ee67 6ac2 	vnmul.f32	s13, s15, s4
            p1 = co6 * r6;
            p2 = si6 * s6;
 80020d2:	ee63 7a0b 	vmul.f32	s15, s6, s22
            pSrc[2 * i8 + 1] = p3 - p4;
 80020d6:	eee2 6a86 	vfma.f32	s13, s5, s12
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 80020da:	eee3 7a87 	vfma.f32	s15, s7, s14
            pSrc[2 * i8 + 1] = p3 - p4;
 80020de:	edc5 6a00 	vstr	s13, [r5]
            pSrc[2 * i6 + 1] = p3 - p4;
 80020e2:	ee27 7a43 	vnmul.f32	s14, s14, s6
            pSrc[2 * i6]     = p1 + p2;
 80020e6:	ed4c 7a01 	vstr	s15, [ip, #-4]
            p1 = co4 * t1;
            p2 = si4 * t2;
 80020ea:	ee64 7a2a 	vmul.f32	s15, s8, s21
            pSrc[2 * i6 + 1] = p3 - p4;
 80020ee:	eea3 7a8b 	vfma.f32	s14, s7, s22
 80020f2:	440d      	add	r5, r1
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 80020f4:	eee4 7a8a 	vfma.f32	s15, s9, s20
            pSrc[2 * i6 + 1] = p3 - p4;
 80020f8:	ed8c 7a00 	vstr	s14, [ip]
            pSrc[2 * i4]     = p1 + p2;
 80020fc:	ed46 7a01 	vstr	s15, [r6, #-4]
            pSrc[2 * i4 + 1] = p3 - p4;
 8002100:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 8002104:	448c      	add	ip, r1
 8002106:	eee4 7aaa 	vfma.f32	s15, s9, s21
 800210a:	edc6 7a00 	vstr	s15, [r6]
            
            i1 += n1;
 800210e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002110:	469b      	mov	fp, r3
 8002112:	9b03      	ldr	r3, [sp, #12]
 8002114:	449b      	add	fp, r3
         } while(i1 < fftLen);
 8002116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            i1 += n1;
 8002118:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
         } while(i1 < fftLen);
 800211c:	469b      	mov	fp, r3
 800211e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002120:	459b      	cmp	fp, r3
 8002122:	440e      	add	r6, r1
 8002124:	f63f af02 	bhi.w	8001f2c <arm_radix8_butterfly_f32+0x340>
         
         j++;
 8002128:	9b04      	ldr	r3, [sp, #16]
 800212a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800212c:	3301      	adds	r3, #1
 800212e:	9304      	str	r3, [sp, #16]
 8002130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002132:	442b      	add	r3, r5
 8002134:	930b      	str	r3, [sp, #44]	; 0x2c
 8002136:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800213a:	442b      	add	r3, r5
 800213c:	930a      	str	r3, [sp, #40]	; 0x28
 800213e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002142:	442b      	add	r3, r5
 8002144:	9309      	str	r3, [sp, #36]	; 0x24
 8002146:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002148:	9b08      	ldr	r3, [sp, #32]
 800214a:	442b      	add	r3, r5
 800214c:	9308      	str	r3, [sp, #32]
 800214e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002150:	9b07      	ldr	r3, [sp, #28]
 8002152:	442b      	add	r3, r5
 8002154:	9307      	str	r3, [sp, #28]
 8002156:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8002158:	9b06      	ldr	r3, [sp, #24]
 800215a:	442b      	add	r3, r5
 800215c:	9306      	str	r3, [sp, #24]
 800215e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002160:	9b05      	ldr	r3, [sp, #20]
 8002162:	442b      	add	r3, r5
 8002164:	9305      	str	r3, [sp, #20]
      } while(j < n2);
 8002166:	9b04      	ldr	r3, [sp, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	f104 0408 	add.w	r4, r4, #8
 800216e:	f47f ae91 	bne.w	8001e94 <arm_radix8_butterfly_f32+0x2a8>
      
      twidCoefModifier <<= 3;
 8002172:	9b01      	ldr	r3, [sp, #4]
         j++;
 8002174:	9203      	str	r2, [sp, #12]
      twidCoefModifier <<= 3;
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	b29b      	uxth	r3, r3
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	e543      	b.n	8001c06 <arm_radix8_butterfly_f32+0x1a>
   } while(n2 > 7);   
}
 800217e:	b01d      	add	sp, #116	; 0x74
 8002180:	ecbd 8b10 	vpop	{d8-d15}
 8002184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002188:	b530      	push	{r4, r5, lr}
 800218a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218c:	2230      	movs	r2, #48	; 0x30
 800218e:	2100      	movs	r1, #0
 8002190:	a808      	add	r0, sp, #32
 8002192:	f000 f915 	bl	80023c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002196:	2100      	movs	r1, #0
 8002198:	2214      	movs	r2, #20
 800219a:	a803      	add	r0, sp, #12
 800219c:	f000 f910 	bl	80023c0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	2400      	movs	r4, #0
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <SystemClock_Config+0x8c>)
 80021a4:	9401      	str	r4, [sp, #4]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <SystemClock_Config+0x90>)
 80021ba:	9402      	str	r4, [sp, #8]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d0:	2301      	movs	r3, #1
 80021d2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021d4:	2310      	movs	r3, #16
 80021d6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d8:	2308      	movs	r3, #8
 80021da:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021dc:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021de:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021e0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021e8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ea:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ec:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ee:	f7fe fe99 	bl	8000f24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f2:	230f      	movs	r3, #15
 80021f4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021fa:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021fc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002202:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002204:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002206:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002208:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800220a:	f7ff f83b 	bl	8001284 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800220e:	b015      	add	sp, #84	; 0x54
 8002210:	bd30      	pop	{r4, r5, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40007000 	.word	0x40007000

0800221c <main>:
{
 800221c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_Init();
 800221e:	f7fe fdf9 	bl	8000e14 <HAL_Init>
  SystemClock_Config();
 8002222:	f7ff ffb1 	bl	8002188 <SystemClock_Config>
    arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <main+0x44>)
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <main+0x48>)
    arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 800222a:	4d0f      	ldr	r5, [pc, #60]	; (8002268 <main+0x4c>)
    arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <main+0x50>)
 8002232:	480f      	ldr	r0, [pc, #60]	; (8002270 <main+0x54>)
    arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8002234:	4c0f      	ldr	r4, [pc, #60]	; (8002274 <main+0x58>)
    arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput_f32_10khz, ifftFlag, doBitReverse);
 8002236:	f7ff fc70 	bl	8001b1a <arm_cfft_f32>
    arm_cmplx_mag_f32(testInput_f32_10khz, testOutput, fftSize);
 800223a:	682a      	ldr	r2, [r5, #0]
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <main+0x5c>)
 800223e:	480b      	ldr	r0, [pc, #44]	; (800226c <main+0x50>)
 8002240:	f7ff f8cc 	bl	80013dc <arm_cmplx_mag_f32>
    arm_max_f32(testOutput, fftSize, &maxValue, &testIndex);
 8002244:	4623      	mov	r3, r4
 8002246:	aa01      	add	r2, sp, #4
 8002248:	6829      	ldr	r1, [r5, #0]
 800224a:	480b      	ldr	r0, [pc, #44]	; (8002278 <main+0x5c>)
 800224c:	f7ff f924 	bl	8001498 <arm_max_f32>
    if(testIndex !=  refIndex)
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <main+0x60>)
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d000      	beq.n	800225c <main+0x40>
 800225a:	e7fe      	b.n	800225a <main+0x3e>
 800225c:	e7fe      	b.n	800225c <main+0x40>
 800225e:	bf00      	nop
 8002260:	20002008 	.word	0x20002008
 8002264:	2000209c 	.word	0x2000209c
 8002268:	2000200c 	.word	0x2000200c
 800226c:	20000008 	.word	0x20000008
 8002270:	0800532c 	.word	0x0800532c
 8002274:	200020a0 	.word	0x200020a0
 8002278:	200020a4 	.word	0x200020a4
 800227c:	20002010 	.word	0x20002010

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_MspInit+0x34>)
 8002284:	2100      	movs	r1, #0
 8002286:	9100      	str	r1, [sp, #0]
 8002288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800228a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
 8002290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002292:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	9101      	str	r1, [sp, #4]
 800229c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ae:	b002      	add	sp, #8
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <NMI_Handler>:
 80022b8:	4770      	bx	lr

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	e7fe      	b.n	80022be <BusFault_Handler>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler>

080022c2 <SVC_Handler>:
 80022c2:	4770      	bx	lr

080022c4 <DebugMon_Handler>:
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c8:	f7fe bdbe 	b.w	8000e48 <HAL_IncTick>

080022cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022cc:	490f      	ldr	r1, [pc, #60]	; (800230c <SystemInit+0x40>)
 80022ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <SystemInit+0x44>)
 80022dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80022e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80022ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <SystemInit+0x48>)
 80022f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002300:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002302:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002306:	608b      	str	r3, [r1, #8]
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	40023800 	.word	0x40023800
 8002314:	24003010 	.word	0x24003010

08002318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800231c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800231e:	e003      	b.n	8002328 <LoopCopyDataInit>

08002320 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002322:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002324:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002326:	3104      	adds	r1, #4

08002328 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800232c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800232e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002330:	d3f6      	bcc.n	8002320 <CopyDataInit>
  ldr  r2, =_sbss
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002334:	e002      	b.n	800233c <LoopFillZerobss>

08002336 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002336:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002338:	f842 3b04 	str.w	r3, [r2], #4

0800233c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800233e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002340:	d3f9      	bcc.n	8002336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002342:	f7ff ffc3 	bl	80022cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f000 f817 	bl	8002378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234a:	f7ff ff67 	bl	800221c <main>
  bx  lr    
 800234e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002350:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002354:	08005364 	.word	0x08005364
  ldr  r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800235c:	20002080 	.word	0x20002080
  ldr  r2, =_sbss
 8002360:	20002080 	.word	0x20002080
  ldr  r3, = _ebss
 8002364:	200030a8 	.word	0x200030a8

08002368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC_IRQHandler>
	...

0800236c <__errno>:
 800236c:	4b01      	ldr	r3, [pc, #4]	; (8002374 <__errno+0x8>)
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20002018 	.word	0x20002018

08002378 <__libc_init_array>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	4e0d      	ldr	r6, [pc, #52]	; (80023b0 <__libc_init_array+0x38>)
 800237c:	4c0d      	ldr	r4, [pc, #52]	; (80023b4 <__libc_init_array+0x3c>)
 800237e:	1ba4      	subs	r4, r4, r6
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	2500      	movs	r5, #0
 8002384:	42a5      	cmp	r5, r4
 8002386:	d109      	bne.n	800239c <__libc_init_array+0x24>
 8002388:	4e0b      	ldr	r6, [pc, #44]	; (80023b8 <__libc_init_array+0x40>)
 800238a:	4c0c      	ldr	r4, [pc, #48]	; (80023bc <__libc_init_array+0x44>)
 800238c:	f000 f8ba 	bl	8002504 <_init>
 8002390:	1ba4      	subs	r4, r4, r6
 8002392:	10a4      	asrs	r4, r4, #2
 8002394:	2500      	movs	r5, #0
 8002396:	42a5      	cmp	r5, r4
 8002398:	d105      	bne.n	80023a6 <__libc_init_array+0x2e>
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023a0:	4798      	blx	r3
 80023a2:	3501      	adds	r5, #1
 80023a4:	e7ee      	b.n	8002384 <__libc_init_array+0xc>
 80023a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023aa:	4798      	blx	r3
 80023ac:	3501      	adds	r5, #1
 80023ae:	e7f2      	b.n	8002396 <__libc_init_array+0x1e>
 80023b0:	0800535c 	.word	0x0800535c
 80023b4:	0800535c 	.word	0x0800535c
 80023b8:	0800535c 	.word	0x0800535c
 80023bc:	08005360 	.word	0x08005360

080023c0 <memset>:
 80023c0:	4402      	add	r2, r0
 80023c2:	4603      	mov	r3, r0
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d100      	bne.n	80023ca <memset+0xa>
 80023c8:	4770      	bx	lr
 80023ca:	f803 1b01 	strb.w	r1, [r3], #1
 80023ce:	e7f9      	b.n	80023c4 <memset+0x4>

080023d0 <sqrtf>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	ed2d 8b02 	vpush	{d8}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	eeb0 8a40 	vmov.f32	s16, s0
 80023dc:	f000 f848 	bl	8002470 <__ieee754_sqrtf>
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <sqrtf+0x98>)
 80023e2:	f993 4000 	ldrsb.w	r4, [r3]
 80023e6:	1c63      	adds	r3, r4, #1
 80023e8:	d02c      	beq.n	8002444 <sqrtf+0x74>
 80023ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	d627      	bvs.n	8002444 <sqrtf+0x74>
 80023f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80023f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fc:	d522      	bpl.n	8002444 <sqrtf+0x74>
 80023fe:	2301      	movs	r3, #1
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <sqrtf+0x9c>)
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	ee18 0a10 	vmov	r0, s16
 800240a:	2300      	movs	r3, #0
 800240c:	9308      	str	r3, [sp, #32]
 800240e:	f7fe f89f 	bl	8000550 <__aeabi_f2d>
 8002412:	2200      	movs	r2, #0
 8002414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800241c:	2300      	movs	r3, #0
 800241e:	b9ac      	cbnz	r4, 800244c <sqrtf+0x7c>
 8002420:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002424:	4668      	mov	r0, sp
 8002426:	f000 f86a 	bl	80024fe <matherr>
 800242a:	b1b8      	cbz	r0, 800245c <sqrtf+0x8c>
 800242c:	9b08      	ldr	r3, [sp, #32]
 800242e:	b11b      	cbz	r3, 8002438 <sqrtf+0x68>
 8002430:	f7ff ff9c 	bl	800236c <__errno>
 8002434:	9b08      	ldr	r3, [sp, #32]
 8002436:	6003      	str	r3, [r0, #0]
 8002438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800243c:	f7fe faee 	bl	8000a1c <__aeabi_d2f>
 8002440:	ee00 0a10 	vmov	s0, r0
 8002444:	b00a      	add	sp, #40	; 0x28
 8002446:	ecbd 8b02 	vpop	{d8}
 800244a:	bd10      	pop	{r4, pc}
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	f7fe f9fc 	bl	800084c <__aeabi_ddiv>
 8002454:	2c02      	cmp	r4, #2
 8002456:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800245a:	d1e3      	bne.n	8002424 <sqrtf+0x54>
 800245c:	f7ff ff86 	bl	800236c <__errno>
 8002460:	2321      	movs	r3, #33	; 0x21
 8002462:	6003      	str	r3, [r0, #0]
 8002464:	e7e2      	b.n	800242c <sqrtf+0x5c>
 8002466:	bf00      	nop
 8002468:	2000207c 	.word	0x2000207c
 800246c:	0800534c 	.word	0x0800534c

08002470 <__ieee754_sqrtf>:
 8002470:	ee10 2a10 	vmov	r2, s0
 8002474:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8002478:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	d302      	bcc.n	8002486 <__ieee754_sqrtf+0x16>
 8002480:	eea0 0a00 	vfma.f32	s0, s0, s0
 8002484:	bd70      	pop	{r4, r5, r6, pc}
 8002486:	b3b1      	cbz	r1, 80024f6 <__ieee754_sqrtf+0x86>
 8002488:	2a00      	cmp	r2, #0
 800248a:	da04      	bge.n	8002496 <__ieee754_sqrtf+0x26>
 800248c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002490:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002494:	bd70      	pop	{r4, r5, r6, pc}
 8002496:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800249a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800249e:	d204      	bcs.n	80024aa <__ieee754_sqrtf+0x3a>
 80024a0:	2100      	movs	r1, #0
 80024a2:	0210      	lsls	r0, r2, #8
 80024a4:	d528      	bpl.n	80024f8 <__ieee754_sqrtf+0x88>
 80024a6:	3901      	subs	r1, #1
 80024a8:	1a5b      	subs	r3, r3, r1
 80024aa:	3b7f      	subs	r3, #127	; 0x7f
 80024ac:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80024b0:	07d9      	lsls	r1, r3, #31
 80024b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024b6:	bf48      	it	mi
 80024b8:	0052      	lslmi	r2, r2, #1
 80024ba:	1059      	asrs	r1, r3, #1
 80024bc:	2300      	movs	r3, #0
 80024be:	0052      	lsls	r2, r2, #1
 80024c0:	2419      	movs	r4, #25
 80024c2:	461e      	mov	r6, r3
 80024c4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80024c8:	1835      	adds	r5, r6, r0
 80024ca:	4295      	cmp	r5, r2
 80024cc:	bfde      	ittt	le
 80024ce:	182e      	addle	r6, r5, r0
 80024d0:	1b52      	suble	r2, r2, r5
 80024d2:	181b      	addle	r3, r3, r0
 80024d4:	3c01      	subs	r4, #1
 80024d6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80024da:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80024de:	d1f3      	bne.n	80024c8 <__ieee754_sqrtf+0x58>
 80024e0:	b112      	cbz	r2, 80024e8 <__ieee754_sqrtf+0x78>
 80024e2:	3301      	adds	r3, #1
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	105b      	asrs	r3, r3, #1
 80024ea:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80024ee:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80024f2:	ee00 3a10 	vmov	s0, r3
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	0052      	lsls	r2, r2, #1
 80024fa:	3101      	adds	r1, #1
 80024fc:	e7d1      	b.n	80024a2 <__ieee754_sqrtf+0x32>

080024fe <matherr>:
 80024fe:	2000      	movs	r0, #0
 8002500:	4770      	bx	lr
	...

08002504 <_init>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	bf00      	nop
 8002508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250a:	bc08      	pop	{r3}
 800250c:	469e      	mov	lr, r3
 800250e:	4770      	bx	lr

08002510 <_fini>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr
